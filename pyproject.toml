[build-system]
requires = [
    "hatchling",
]
build-backend = "hatchling.build"

[project]
name = "keiko-backend"
version = "1.0.0"
description = "Keiko Personal Assistant Backend with Advanced Observability"
readme = "README.md"
requires-python = ">=3.11"
authors = [
    { name = "Keiko Development Team" },
]
keywords = [
    "ai-assistant",
    "personal-assistant",
    "api",
    "observability",
    "opentelemetry",
    "fastapi",
    "monitoring",
]
classifiers = [
    "Development Status :: 2 - Pre-Alpha",
    "Intended Audience :: Developers",
    "License :: OSI Approved :: MIT License",
    "Programming Language :: Python :: 3",
    "Topic :: Software Development :: Libraries :: Application Frameworks",
    "Topic :: System :: Monitoring",
]
# RUNTIME DEPENDENCIES ONLY
# Only essential dependencies required for the application to run in production
dependencies = [
    # Core Web Framework
    "fastapi[all]>=0.116.1",
    "uvicorn[standard]>=0.35.0",
    "starlette>=0.47.2",

    # Data Validation & Settings
    "pydantic>=2.11.7",
    "pydantic[email]>=2.11.7",
    "pydantic-settings>=2.10.1",

    # HTTP Clients
    "httpx>=0.28.1",
    "aiohttp>=3.12.15",

    # Database & Storage
    "redis>=6.4.0",
    "redis[hiredis]>=5.0.0",
    "asyncpg>=0.30.0",
    "psycopg2-binary>=2.9.9",
    "sqlalchemy[asyncio]>=2.0.43",
    "alembic>=1.16.4",
    "azure-cosmos>=4.9.0",
    "aiofiles>=24.1.0",

    # Azure Services
    "azure-identity>=1.24.0",
    "azure-keyvault-secrets>=4.10.0",
    "azure-storage-blob>=12.26.0",
    "azure-ai-projects>=1.0.0",
    "azure-ai-agents>=1.1.0",
    "azure-ai-inference>=1.0.0b9",
    "azure-ai-evaluation>=1.10.0",
    "azure-core>=1.35.0",
    "azure-monitor-opentelemetry>=1.6.13",

    # AI & ML Core
    "openai>=1.99.9",
    "anthropic>=0.64.0",
    "tiktoken>=0.11.0",
    "langchain-core>=0.3.74",
    "langgraph>=0.6.4",
    "langsmith>=0.4.13",
    "langchain-openai>=0.3.29",
    "prompty>=0.1.50",
    "foundry-ai>=0.1.0",

    # ML Libraries (Runtime needed for model inference)
    "scikit-learn>=1.7.1",
    "pandas>=2.3.2",
    "numpy>=2.2.6",
    "xgboost>=3.0.4",
    "joblib>=1.5.2",

    # Image Processing (Runtime needed for photo workflows)
    "opencv-python>=4.12.0.88",
    "pillow>=11.3.0",
    "PyMuPDF>=1.25.0",

    # Observability & Monitoring (Core Runtime)
    "opentelemetry-api>=1.36.0",
    "opentelemetry-sdk>=1.36.0",
    "opentelemetry-instrumentation>=0.57b0",
    "opentelemetry-instrumentation-fastapi>=0.57b0",
    "opentelemetry-instrumentation-requests>=0.57b0",
    "opentelemetry-instrumentation-httpx>=0.57b0",
    "opentelemetry-instrumentation-urllib3>=0.57b0",
    "opentelemetry-instrumentation-redis>=0.57b0",
    "opentelemetry-instrumentation-logging>=0.57b0",
    "opentelemetry-exporter-otlp>=1.36.0",
    "opentelemetry-exporter-otlp-proto-grpc>=1.36.0",
    "opentelemetry-propagator-b3>=1.36.0",
    "opentelemetry-semantic-conventions>=0.57b0",
    "opentelemetry-exporter-prometheus>=0.57b0",
    "opentelemetry-resource-detector-azure>=0.1.5",
    "opentelemetry-resourcedetector-gcp>=1.9.0a0",
    "logfire[sqlalchemy,system-metrics]>=4.3.5",
    "prometheus-client>=0.22.1",

    # Security & Authentication
    "python-jose[cryptography]>=3.5.0",
    "passlib[bcrypt]>=1.7.4",
    "cryptography>=45.0.6",
    "pyotp>=2.9.0",
    "qrcode>=8.2",

    # Communication & Messaging
    "websockets>=15.0.1",
    "python-socketio>=5.13.0",
    "nats-py>=2.11.0",
    "aiokafka>=0.12.0",
    "fastavro>=1.12.0",

    # gRPC Services
    "grpcio>=1.74.0",
    "grpcio-tools>=1.74.0",
    "grpcio-reflection>=1.74.0",
    "grpcio-status>=1.74.0",
    "googleapis-common-protos>=1.70.0",

    # Data Formats & Serialization
    "orjson>=3.11.1",
    "msgpack>=1.1.1",
    "jsonschema>=4.25.0",
    "pyyaml>=6.0.2",
    "python-multipart>=0.0.20",

    # Utilities & Infrastructure
    "python-dotenv>=1.1.1",
    "python-dateutil>=2.9.0.post0",
    "pytz>=2025.2",
    "rich>=14.1.0",
    "click>=8.2.1",
    "structlog>=25.4.0",
    "sentry-sdk[fastapi]>=2.34.1",
    "backoff>=2.2.1",
    "jinja2>=3.1.6",

    # Graph & Visualization (Runtime needed for workflow visualization)
    "graphviz>=0.21",
    "networkx>=3.5",
    "pydot>=4.0.1",

    # Container Management (Runtime needed for orchestration)
    "docker>=6.1.0",
]

[project.license]
text = "MIT"

# MIGRATION: Moving from [project.optional-dependencies] to [dependency-groups]
# This provides better separation and uv-native dependency management

[dependency-groups]
# Development tools and utilities
dev = [
    # Code Quality & Linting
    "ruff>=0.12.8",
    "bandit[toml]>=1.8.6",
    "mypy>=1.17.1",
    "pip-audit>=2.9.0",

    # Type Stubs - Comprehensive coverage for enterprise typing
    "types-redis>=4.6.0.20241004",
    "types-python-dateutil>=2.9.0.20240906",
    "types-pytz>=2024.2.0.20241003",
    "types-requests>=2.32.0.20241016",
    "types-pyyaml>=6.0.12.20240917",
    "types-setuptools>=75.1.0.20240917",
    "types-urllib3>=1.26.25.14",
    "types-psycopg2>=2.9.21.20240819",
    "types-pillow>=10.2.0.20240822",
    "types-jsonschema>=4.23.0.20240813",
    "types-click>=7.1.8",
    "types-cryptography>=3.3.23.2",
    "types-passlib>=1.7.7.20240819",
    "types-python-jose>=3.3.4.20240106",
    "types-orjson>=3.6.2",
    "types-aiofiles>=24.1.0.20240626",

    # Git & Commit Tools
    "pre-commit>=4.3.0",
    "commitizen>=4.8.3",

    # Development Utilities
    "rich-click>=1.8.9",
    "httpie>=3.2.4",
    "watchfiles>=1.1.0",
    "ipython>=9.4.0",
    "ipdb>=0.13.13",
    "freezegun>=1.5.5",

    # Profiling & Performance
    "memory-profiler>=0.61.0",
    "line-profiler>=5.0.0",
    "py-spy>=0.4.1",
]

# Testing framework and tools
test = [
    # Core Testing Framework
    "pytest>=8.4.1",
    "pytest-asyncio>=1.1.0",
    "pytest-cov>=6.2.1",
    "pytest-mock>=3.14.1",
    "pytest-xdist>=3.8.0",
    "pytest-timeout>=2.4.0",
    "pytest-randomly>=3.16.0",
    "pytest-benchmark>=5.1.0",
    "pytest-clarity>=1.0.1",
    "pytest-sugar>=1.0.0",
    "pytest-httpx>=0.35.0",
    "syrupy>=4.9.1",

    # Coverage & Reporting
    "coverage[toml]>=7.10.3",

    # Test Infrastructure
    "testcontainers[compose]>=4.9.0",

    # Contract Testing
    "pact-python>=2.3.3",
]

# Documentation generation
docs = [
    # Core Documentation
    "mkdocs>=1.6.1",
    "mkdocs-material>=9.6.16",
    "neoteroi-mkdocs>=1.1.3",

    # MkDocs Plugins
    "mkdocs-awesome-pages-plugin>=2.10.1",
    "mkdocs-git-revision-date-localized-plugin>=1.4.7",
    "mkdocs-git-authors-plugin>=0.10.0",
    "mkdocs-minify-plugin>=0.8.0",
    "mkdocs-mermaid2-plugin>=1.2.1",
    "mkdocstrings[python]>=0.26.2",

    # Syntax Highlighting
    "pygments>=2.19.2",
    "pymdown-extensions>=10.16.1",
]

# API specification and validation
api = [
    "openapi-generator-cli>=7.14.0",
    "apispec[yaml]>=6.8.2",
    "openapi-spec-validator>=0.7.2",
]

# Performance testing and load testing
perf = [
    "locust>=2.38.1",
    "pytest-benchmark>=5.1.0",
    "memory-profiler>=0.61.0",
    "line-profiler>=5.0.0",
    "py-spy>=0.4.1",
]

# Enhanced observability and monitoring tools
observability = [
    # Extended OpenTelemetry
    "opentelemetry-exporter-otlp-proto-http>=1.36.0",
    "opentelemetry-processor-baggage>=0.57b0",
    "opentelemetry-propagator-jaeger>=1.36.0",
    "opentelemetry-propagator-ot-trace>=0.57b0",

    # Monitoring & Metrics
    "grafana-client>=5.0.0",
    "psutil>=7.0.0",
    "py-cpuinfo>=9.0.0",
]

# Azure-specific development tools
azure = [
    "azure-monitor-opentelemetry-exporter>=1.0.0b41",
    "azure-servicebus>=7.14.2",
    "azure-functions>=1.23.0",
]

# Production deployment tools
deployment = [
    "gunicorn>=23.0.0",
    "uvloop>=0.21.0",
    "httptools>=0.6.4",
    "supervisor>=4.2.5",
]

# Legacy optional-dependencies for backward compatibility
# TODO: Remove after full migration to dependency-groups
[project.optional-dependencies]
# Kept for CI/CD compatibility during transition
dev = [
    "ruff>=0.12.8",
    "pytest>=8.4.1",
    "coverage[toml]>=7.10.3",
]

[tool.ruff]
target-version = "py312"
line-length = 100
src = [".", "agents", "services", "config", "data_models", "monitoring", "storage", "voice"]

# Comprehensive rule selection for enterprise-grade code quality
# Ruff replaces: flake8, isort, black, pyupgrade, and many other tools
select = [
    # Core Python rules
    "E",     # pycodestyle errors
    "W",     # pycodestyle warnings
    "F",     # Pyflakes
    "I",     # isort (import sorting) - REPLACES isort
    "B",     # flake8-bugbear
    "C4",    # flake8-comprehensions
    "UP",    # pyupgrade
    "ARG",   # flake8-unused-arguments
    "SIM",   # flake8-simplify
    "TCH",   # flake8-type-checking
    "D",     # pydocstyle
    "S",     # flake8-bandit
    "N",     # pep8-naming
    "ERA",   # eradicate
    "PL",    # Pylint
    "RUF",   # Ruff-specific rules
    # Additional rules for better code quality
    "ANN",   # flake8-annotations
    "BLE",   # flake8-blind-except
    "FBT",   # flake8-boolean-trap
    "A",     # flake8-builtins
    "COM",   # flake8-commas
    "DTZ",   # flake8-datetimez
    "EM",    # flake8-errmsg
    "G",     # flake8-logging-format
    "PIE",   # flake8-pie
    "PT",    # flake8-pytest-style
    "Q",     # flake8-quotes
    "RSE",   # flake8-raise
    "RET",   # flake8-return
    "SLF",   # flake8-self
    "SIM",   # flake8-simplify
    "TID",   # flake8-tidy-imports
    "PTH",   # flake8-use-pathlib
    "PERF",  # Perflint
    "FURB",  # refurb
    "LOG",   # flake8-logging
]

ignore = [
    # Line length handled by formatter
    "E501",    # Line too long
    # Common patterns we allow
    "B008",    # Do not perform function calls in argument defaults
    "B904",    # Within an except clause, raise exceptions with raise ... from err
    # Docstring rules - module level docs not always needed
    "D100",    # Missing docstring in public module
    "D104",    # Missing docstring in public package
    "D203",    # 1 blank line required before class docstring
    "D213",    # Multi-line docstring summary should start at the second line
    # Annotation rules - too strict for some cases
    "ANN101",  # Missing type annotation for self in method
    "ANN102",  # Missing type annotation for cls in classmethod
    "ANN401",  # Dynamically typed expressions (Any) are disallowed
    # Security rules - false positives in tests
    "S101",    # Use of assert detected
    # Import rules - sometimes we need relative imports
    "TID252",  # Relative imports from parent modules are banned
]

[tool.ruff.format]
quote-style = "double"
indent-style = "space"
skip-magic-trailing-comma = false
line-ending = "auto"

[tool.ruff.isort]
# Import sorting configuration (replaces standalone isort)
known-first-party = [
    "keiko",
    "agents",
    "services",
    "config",
    "data_models",
    "monitoring",
    "observability",
    "storage",
    "voice",
    "voice_performance",
    "voice_rate_limiting",
    "kei_logging",
    "audit_system",
    "policy_engine",
    "quotas_limits",
    "task_management",
    "security",
    "auth",
    "core",
    "utils",
    "api",
    "app",
    "middleware",
    "messaging",
    "webrtc",
    "workflows",
    "edge",
    "grpc_services",
    "infrastructure",
    "kubernetes",
    "n8n",
    "scripts",
    "specs",
    "templates",
    "tests",
]
force-sort-within-sections = true
split-on-trailing-comma = true
combine-as-imports = true
force-single-line = false
lines-after-imports = 2
order-by-type = true

[tool.ruff.pydocstyle]
convention = "google"

# ENTERPRISE-READY MYPY CONFIGURATION
# Strict type checking for production-grade Python applications
[tool.mypy]
python_version = "3.12"

# Core strict settings
strict = false  # We enable strict mode per-module for gradual adoption
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
strict_equality = true
show_error_codes = true

# Additional enterprise-grade checks
disallow_any_unimported = true
disallow_any_expr = false  # Too strict for gradual typing
disallow_any_decorated = false  # Too strict for decorators
disallow_any_explicit = false  # Allow explicit Any when needed
disallow_any_generics = true
disallow_subclassing_any = true
implicit_reexport = false
strict_optional = true

# Error reporting
show_column_numbers = true
show_error_context = true
color_output = true
error_summary = true
pretty = true

# Performance and caching
cache_dir = ".mypy_cache"
sqlite_cache = true
incremental = true

# Import discovery
namespace_packages = true
explicit_package_bases = true
ignore_missing_imports = false  # We handle missing imports explicitly

# Platform and version
platform = "linux"

# STRICT TYPING FOR CORE MODULES
# Gradually enable strict mode for critical business logic
[[tool.mypy.overrides]]
module = [
    "config.constants",
    "config.deployment_mode",
    "config.env_utils",  # Partial strict - legacy functions ignored
    "core.constants",
    "core.exceptions",
    "core.versioning",
    "data_models.*",
    "auth.*",
    "security.*",
]
strict = true
disallow_any_expr = false  # Relaxed for legacy functions
disallow_any_decorated = true

# CORE LEGACY MODULES - Complex DI container with optional dependencies
[[tool.mypy.overrides]]
module = [
    "core.container",
    "core.error_handler",
    "core.logging_strategy",
]
strict = false
disallow_untyped_defs = false
disallow_incomplete_defs = false

# STRICT TYPING FOR API LAYER
[[tool.mypy.overrides]]
module = [
    "api.*",
    "app.*",
    "middleware.*",
]
strict = true
disallow_any_generics = true

# STRICT TYPING FOR AGENTS FRAMEWORK
[[tool.mypy.overrides]]
module = [
    "agents.core.*",
    "agents.base_agent",
    "agents.constants",
    "agents.metadata",
]
strict = true

# MONITORING AND OBSERVABILITY
[[tool.mypy.overrides]]
module = [
    "monitoring.*",
    "observability.*",
    "kei_logging.*",
]
strict = true

# THIRD-PARTY LIBRARIES WITH MISSING TYPE STUBS
# Minimize ignore_missing_imports to only truly untyped libraries
[[tool.mypy.overrides]]
module = [
    # OpenTelemetry - some modules lack complete stubs
    "opentelemetry.exporter.otlp.proto.grpc.*",
    "opentelemetry.resourcedetector.*",

    # Testing libraries
    "pact.*",
    "testcontainers.*",

    # Azure SDK - some modules lack stubs
    "azure.ai.projects.*",
    "azure.ai.agents.*",
    "azure.ai.inference.*",
    "azure.ai.evaluation.*",

    # AI/ML libraries with incomplete stubs
    "langchain_core.*",
    "langgraph.*",
    "langsmith.*",
    "foundry_ai.*",
    "prompty.*",

    # Specialized libraries
    "jaeger_client.*",
    "graphviz.*",
    "pydot.*",
    "cv2.*",  # opencv-python
    "PyMuPDF.*",

    # Development tools
    "memory_profiler.*",
    "line_profiler.*",
    "py_spy.*",
]
ignore_missing_imports = true

# LEGACY CODE - GRADUAL TYPING
# Less strict for legacy modules during migration
[[tool.mypy.overrides]]
module = [
    "agents.adapter.*",
    "agents.chains.*",
    "agents.custom.*",
    "agents.factory.*",
    "agents.memory.*",
    "agents.registry.*",
    "agents.tools.*",
    "agents.workflows.*",
    "services.*",
    "workflows.*",
    "voice.*",
    "edge.*",
    "grpc_services.*",
    "infrastructure.*",
    "kubernetes.*",
    "n8n.*",
    "scripts.*",
    "specs.*",
    "templates.*",
]
strict = false
disallow_untyped_defs = false
disallow_incomplete_defs = false

# TEST CODE - RELAXED TYPING
[[tool.mypy.overrides]]
module = [
    "tests.*",
    "conftest",
]
strict = false
disallow_untyped_defs = false
disallow_incomplete_defs = false
ignore_errors = false  # Still check for basic errors

# Pytest-Konfiguration wurde nach pytest.ini verschoben
# um Duplikate zu vermeiden und eine einheitliche Quelle der Wahrheit zu haben

# Coverage-Konfiguration wurde nach .coveragerc verschoben
# um Duplikate zu vermeiden und eine einheitliche Quelle der Wahrheit zu haben

# Black configuration removed - formatting is now handled by Ruff
# Ruff format is Black-compatible and provides the same formatting with better performance

[tool.commitizen]
name = "cz_conventional_commits"
version = "1.0.0"
tag_format = "v$version"
version_files = [
    "pyproject.toml:version",
    "__init__.py:__version__",
]

[tool.hatch.version]
path = "__init__.py"

[tool.hatch.build.targets.wheel]
# Include all packages and type information for distribution
packages = [
    "agents",
    "api",
    "app",
    "audit_system",
    "auth",
    "config",
    "core",
    "data_models",
    "kei_logging",
    "messaging",
    "middleware",
    "monitoring",
    "observability",
    "policy_engine",
    "quotas_limits",
    "security",
    "services",
    "specs",
    "storage",
    "task_management",
    "utils",
    "voice",
    "voice_performance",
    "voice_rate_limiting",
]

# PEP 561 Type Distribution Support
# Include py.typed marker file for type information distribution
[tool.hatch.build.targets.wheel.force-include]
"py.typed" = "keiko_backend/py.typed"

# Ensure type stubs and inline types are included
[tool.hatch.build.targets.sdist]
include = [
    "py.typed",
    "**/*.py",
    "**/*.pyi",  # Type stub files
]

[tool.hatch.envs.default]
dependencies = [
    "pytest",
    "pytest-cov",
    "pytest-asyncio",
]

[tool.hatch.envs.default.scripts]
test = "pytest {args}"
test-cov = "pytest --cov {args}"
cov-report = [
    "- coverage combine",
    "coverage report",
]
cov = [
    "test-cov",
    "cov-report",
]
lint = [
    "ruff check .",
]
format = [
    "ruff format .",
    "ruff check --fix .",
]
security = "bandit -r backend"

[tool.opentelemetry]
service_name = "keiko-backend"
service_version = "1.0.0"
exporter_otlp_endpoint = "http://localhost:4317"
exporter_otlp_protocol = "grpc"
resource_attributes = "service.name=keiko-backend,service.version=1.0.0"

[tool.development.env]
OTEL_SERVICE_NAME = "keiko-backend"
OTEL_SERVICE_VERSION = "1.0.0"
OTEL_EXPORTER_OTLP_ENDPOINT = "http://localhost:4317"
OTEL_EXPORTER_OTLP_PROTOCOL = "grpc"
OTEL_ENABLE_TRACING = "true"
OTEL_ENABLE_METRICS = "true"
OTEL_TRACE_SAMPLE_RATE = "1.0"
OTEL_DEBUG = "true"
ENVIRONMENT = "development"

[tool.bandit]
exclude_dirs = [
    "tests",
    "test_*",
    "*_test.py",
]
skips = [
    "B101",
    "B601",
    "B602",
]
severity = "medium"
confidence = "medium"

[tool.bandit.assert_used]
skips = [
    "**/tests/**",
    "**/*test*.py",
]

# Duplicate dependency-groups section removed - merged into main section above

# Logfire-Konfiguration - unterdrückt Warnungen in Development
[tool.logfire]
ignore_no_config = true

name: 'Canary Deployment'
description: 'Progressive canary deployment with automated monitoring and rollback'
branding:
  icon: 'trending-up'
  color: 'yellow'

inputs:
  operation:
    description: 'Operation to perform (deploy, promote, rollback, monitor)'
    required: true
  environment:
    description: 'Target environment (staging, production)'
    required: true
  canary-percentage:
    description: 'Percentage of traffic to route to canary (1-100)'
    required: false
    default: '10'
  promotion-strategy:
    description: 'Promotion strategy (manual, automatic, time-based)'
    required: false
    default: 'automatic'
  monitoring-duration:
    description: 'Monitoring duration in minutes before auto-promotion'
    required: false
    default: '30'
  error-threshold:
    description: 'Error rate threshold for automatic rollback (%)'
    required: false
    default: '5'
  latency-threshold:
    description: 'Latency threshold for automatic rollback (ms)'
    required: false
    default: '1000'
  application-image:
    description: 'Canary application container image'
    required: false
    default: ''
  working-directory:
    description: 'Working directory for canary operations'
    required: false
    default: '.'

outputs:
  deployment-result:
    description: 'Result of the canary deployment operation'
    value: ${{ steps.deploy.outputs.deployment-result }}
  canary-status:
    description: 'Current canary deployment status'
    value: ${{ steps.deploy.outputs.canary-status }}
  traffic-percentage:
    description: 'Current traffic percentage to canary'
    value: ${{ steps.deploy.outputs.traffic-percentage }}
  deployment-id:
    description: 'Unique canary deployment identifier'
    value: ${{ steps.deploy.outputs.deployment-id }}
  monitoring-result:
    description: 'Result of canary monitoring'
    value: ${{ steps.monitor.outputs.monitoring-result }}

runs:
  using: 'composite'
  steps:
    - name: üê§ Initialize Canary Deployment
      id: init
      shell: bash
      working-directory: ${{ inputs.working-directory }}
      run: |
        echo "üê§ Initializing canary deployment..."
        echo "Operation: ${{ inputs.operation }}"
        echo "Environment: ${{ inputs.environment }}"
        echo "Canary Percentage: ${{ inputs.canary-percentage }}%"
        echo "Strategy: ${{ inputs.promotion-strategy }}"
        
        # Create canary deployment directory structure
        mkdir -p canary/{stable,canary,configs,logs,metrics}
        mkdir -p canary/traffic-routing
        mkdir -p canary/monitoring-reports
        
        # Generate deployment ID
        DEPLOYMENT_ID="canary-$(date +%Y%m%d_%H%M%S)-${{ github.run_id }}"
        echo "deployment-id=$DEPLOYMENT_ID" >> $GITHUB_OUTPUT
        echo "DEPLOYMENT_ID=$DEPLOYMENT_ID" >> $GITHUB_ENV
        
        # Check current canary status
        CURRENT_CANARY_STATUS=$(cat canary/canary/status 2>/dev/null || echo "none")
        CURRENT_TRAFFIC=$(cat canary/traffic-routing/canary-percentage 2>/dev/null || echo "0")
        
        echo "CURRENT_CANARY_STATUS=$CURRENT_CANARY_STATUS" >> $GITHUB_ENV
        echo "CURRENT_TRAFFIC=$CURRENT_TRAFFIC" >> $GITHUB_ENV
        
        echo "üìä Canary Status:"
        echo "  Current Status: $CURRENT_CANARY_STATUS"
        echo "  Current Traffic: $CURRENT_TRAFFIC%"
        echo "  Deployment ID: $DEPLOYMENT_ID"
        
        # Log operation start
        echo "$(date -u '+%Y-%m-%d %H:%M:%S UTC'): Starting ${{ inputs.operation }} operation" >> canary/logs/canary-deployment.log
        
        echo "‚úÖ Canary deployment initialized"

    - name: üöÄ Execute Canary Deployment
      id: deploy
      shell: bash
      working-directory: ${{ inputs.working-directory }}
      run: |
        echo "üöÄ Executing canary deployment operation: ${{ inputs.operation }}"
        
        DEPLOYMENT_RESULT="failed"
        CANARY_STATUS="${{ env.CURRENT_CANARY_STATUS }}"
        TRAFFIC_PERCENTAGE="${{ env.CURRENT_TRAFFIC }}"
        
        case "${{ inputs.operation }}" in
          "deploy")
            echo "üê§ Deploying canary version..."
            
            # Create canary deployment configuration
            cat << EOF > canary/configs/canary-deployment.json
        {
          "deployment_id": "${{ env.DEPLOYMENT_ID }}",
          "canary_image": "${{ inputs.application-image }}",
          "canary_percentage": ${{ inputs.canary-percentage }},
          "deployed_at": "$(date -u '+%Y-%m-%d %H:%M:%S UTC')",
          "commit_sha": "${{ github.sha }}",
          "branch": "${{ github.ref_name }}",
          "promotion_strategy": "${{ inputs.promotion-strategy }}",
          "monitoring_duration_minutes": ${{ inputs.monitoring-duration }},
          "thresholds": {
            "error_rate_percent": ${{ inputs.error-threshold }},
            "latency_ms": ${{ inputs.latency-threshold }}
          }
        }
        EOF
            
            # Deploy canary version
            echo "üì¶ Pulling canary image..."
            sleep 3
            
            echo "üöÄ Starting canary deployment..."
            sleep 4
            
            echo "‚öôÔ∏è Configuring canary environment..."
            sleep 2
            
            # Configure traffic routing
            echo "üîÑ Configuring traffic routing (${{ inputs.canary-percentage }}% to canary)..."
            echo "${{ inputs.canary-percentage }}" > canary/traffic-routing/canary-percentage
            
            # Create traffic routing configuration
            cat << EOF > canary/traffic-routing/routing-config.json
        {
          "timestamp": "$(date -u '+%Y-%m-%d %H:%M:%S UTC')",
          "stable_percentage": $((100 - ${{ inputs.canary-percentage }})),
          "canary_percentage": ${{ inputs.canary-percentage }},
          "deployment_id": "${{ env.DEPLOYMENT_ID }}",
          "routing_strategy": "weighted"
        }
        EOF
            
            # Update canary status
            echo "active" > canary/canary/status
            echo "${{ env.DEPLOYMENT_ID }}" > canary/canary/deployment-id
            
            CANARY_STATUS="active"
            TRAFFIC_PERCENTAGE="${{ inputs.canary-percentage }}"
            DEPLOYMENT_RESULT="success"
            
            echo "‚úÖ Canary deployment completed - ${{ inputs.canary-percentage }}% traffic routed to canary"
            ;;
            
          "promote")
            echo "üìà Promoting canary to stable..."
            
            if [ "${{ env.CURRENT_CANARY_STATUS }}" != "active" ]; then
              echo "‚ùå No active canary deployment to promote"
              DEPLOYMENT_RESULT="failed"
            else
              # Gradual promotion process
              echo "üîÑ Starting gradual promotion..."
              
              for percentage in 25 50 75 100; do
                echo "üìä Promoting canary to ${percentage}% traffic..."
                echo "$percentage" > canary/traffic-routing/canary-percentage
                sleep 3
                
                # Create promotion step configuration
                cat << EOF > canary/traffic-routing/promotion-${percentage}.json
        {
          "timestamp": "$(date -u '+%Y-%m-%d %H:%M:%S UTC')",
          "promotion_step": $percentage,
          "stable_percentage": $((100 - percentage)),
          "canary_percentage": $percentage,
          "deployment_id": "${{ env.DEPLOYMENT_ID }}"
        }
        EOF
              done
              
              # Complete promotion - make canary the new stable
              echo "‚úÖ Promotion complete - canary is now stable"
              echo "stable" > canary/canary/status
              echo "0" > canary/traffic-routing/canary-percentage
              
              # Archive old stable version
              if [ -f "canary/stable/deployment-id" ]; then
                OLD_STABLE_ID=$(cat canary/stable/deployment-id)
                echo "üì¶ Archiving old stable version: $OLD_STABLE_ID"
              fi
              
              # Promote canary to stable
              cp canary/canary/deployment-id canary/stable/deployment-id
              echo "stable" > canary/stable/status
              
              CANARY_STATUS="promoted"
              TRAFFIC_PERCENTAGE="0"
              DEPLOYMENT_RESULT="success"
            fi
            ;;
            
          "rollback")
            echo "‚è™ Rolling back canary deployment..."
            
            if [ "${{ env.CURRENT_CANARY_STATUS }}" = "none" ]; then
              echo "‚ùå No canary deployment to rollback"
              DEPLOYMENT_RESULT="failed"
            else
              # Immediate rollback - route all traffic to stable
              echo "üö® Emergency rollback - routing all traffic to stable..."
              echo "0" > canary/traffic-routing/canary-percentage
              
              # Create rollback configuration
              cat << EOF > canary/traffic-routing/rollback-config.json
        {
          "timestamp": "$(date -u '+%Y-%m-%d %H:%M:%S UTC')",
          "rollback_from_deployment": "${{ env.DEPLOYMENT_ID }}",
          "reason": "manual_rollback",
          "stable_percentage": 100,
          "canary_percentage": 0
        }
        EOF
              
              # Stop canary deployment
              echo "failed" > canary/canary/status
              
              CANARY_STATUS="rolled_back"
              TRAFFIC_PERCENTAGE="0"
              DEPLOYMENT_RESULT="success"
              
              echo "‚úÖ Canary rollback completed - all traffic routed to stable"
            fi
            ;;
            
          "monitor")
            echo "üìä Monitoring canary deployment..."
            
            if [ "${{ env.CURRENT_CANARY_STATUS }}" != "active" ]; then
              echo "‚ùå No active canary deployment to monitor"
              DEPLOYMENT_RESULT="failed"
            else
              echo "üîç Collecting canary metrics..."
              
              # Simulate metric collection
              sleep 5
              
              # Generate mock metrics
              ERROR_RATE=2.1    # %
              LATENCY=450       # ms
              THROUGHPUT=1250   # req/s
              CPU_USAGE=65      # %
              MEMORY_USAGE=72   # %
              
              echo "üìä Canary Metrics:"
              echo "  Error Rate: ${ERROR_RATE}%"
              echo "  Latency: ${LATENCY}ms"
              echo "  Throughput: ${THROUGHPUT} req/s"
              echo "  CPU Usage: ${CPU_USAGE}%"
              echo "  Memory Usage: ${MEMORY_USAGE}%"
              
              # Create monitoring report
              cat << EOF > canary/monitoring-reports/${{ env.DEPLOYMENT_ID }}-metrics.json
        {
          "deployment_id": "${{ env.DEPLOYMENT_ID }}",
          "monitored_at": "$(date -u '+%Y-%m-%d %H:%M:%S UTC')",
          "canary_percentage": ${{ env.CURRENT_TRAFFIC }},
          "metrics": {
            "error_rate_percent": $ERROR_RATE,
            "latency_ms": $LATENCY,
            "throughput_rps": $THROUGHPUT,
            "cpu_usage_percent": $CPU_USAGE,
            "memory_usage_percent": $MEMORY_USAGE
          },
          "thresholds": {
            "error_rate_threshold": ${{ inputs.error-threshold }},
            "latency_threshold": ${{ inputs.latency-threshold }}
          },
          "status": "healthy"
        }
        EOF
              
              CANARY_STATUS="monitoring"
              TRAFFIC_PERCENTAGE="${{ env.CURRENT_TRAFFIC }}"
              DEPLOYMENT_RESULT="success"
              
              echo "‚úÖ Canary monitoring completed"
            fi
            ;;
            
          *)
            echo "‚ùå Unknown operation: ${{ inputs.operation }}"
            DEPLOYMENT_RESULT="failed"
            ;;
        esac
        
        # Log operation completion
        echo "$(date -u '+%Y-%m-%d %H:%M:%S UTC'): Completed ${{ inputs.operation }} - Result: $DEPLOYMENT_RESULT" >> canary/logs/canary-deployment.log
        
        # Set outputs
        echo "deployment-result=$DEPLOYMENT_RESULT" >> $GITHUB_OUTPUT
        echo "canary-status=$CANARY_STATUS" >> $GITHUB_OUTPUT
        echo "traffic-percentage=$TRAFFIC_PERCENTAGE" >> $GITHUB_OUTPUT
        echo "deployment-id=${{ env.DEPLOYMENT_ID }}" >> $GITHUB_OUTPUT
        
        echo "üìä Deployment Summary:"
        echo "  Result: $DEPLOYMENT_RESULT"
        echo "  Canary Status: $CANARY_STATUS"
        echo "  Traffic Percentage: $TRAFFIC_PERCENTAGE%"

    - name: üìä Canary Monitoring and Analysis
      id: monitor
      if: inputs.operation == 'deploy' || inputs.operation == 'monitor'
      shell: bash
      working-directory: ${{ inputs.working-directory }}
      run: |
        echo "üìä Performing canary monitoring and analysis..."
        
        MONITORING_RESULT="healthy"
        
        # Simulate comprehensive monitoring
        echo "üîç Analyzing canary performance..."
        sleep 4
        
        # Mock performance analysis
        ERROR_RATE=2.1
        LATENCY=450
        ERROR_THRESHOLD=${{ inputs.error-threshold }}
        LATENCY_THRESHOLD=${{ inputs.latency-threshold }}
        
        # Check error rate threshold
        if (( $(echo "$ERROR_RATE > $ERROR_THRESHOLD" | bc -l) )); then
          echo "‚ùå Error rate ($ERROR_RATE%) exceeds threshold ($ERROR_THRESHOLD%)"
          MONITORING_RESULT="unhealthy"
        else
          echo "‚úÖ Error rate ($ERROR_RATE%) within threshold ($ERROR_THRESHOLD%)"
        fi
        
        # Check latency threshold
        if [ $LATENCY -gt $LATENCY_THRESHOLD ]; then
          echo "‚ùå Latency (${LATENCY}ms) exceeds threshold (${LATENCY_THRESHOLD}ms)"
          MONITORING_RESULT="unhealthy"
        else
          echo "‚úÖ Latency (${LATENCY}ms) within threshold (${LATENCY_THRESHOLD}ms)"
        fi
        
        # Additional health checks
        echo "üè• Running additional health checks..."
        sleep 2
        
        HEALTH_CHECKS=(
          "application_health:healthy"
          "database_connectivity:healthy"
          "external_services:healthy"
          "memory_usage:healthy"
          "cpu_usage:healthy"
        )
        
        for check in "${HEALTH_CHECKS[@]}"; do
          check_name=$(echo $check | cut -d':' -f1)
          status=$(echo $check | cut -d':' -f2)
          echo "  ‚úÖ $check_name: $status"
        done
        
        # Create comprehensive monitoring report
        cat << EOF > canary/monitoring-reports/${{ env.DEPLOYMENT_ID }}-analysis.json
        {
          "deployment_id": "${{ env.DEPLOYMENT_ID }}",
          "analysis_timestamp": "$(date -u '+%Y-%m-%d %H:%M:%S UTC')",
          "monitoring_duration_minutes": ${{ inputs.monitoring-duration }},
          "overall_status": "$MONITORING_RESULT",
          "performance_analysis": {
            "error_rate": {
              "current": $ERROR_RATE,
              "threshold": $ERROR_THRESHOLD,
              "status": "$([ $(echo "$ERROR_RATE <= $ERROR_THRESHOLD" | bc -l) -eq 1 ] && echo "pass" || echo "fail")"
            },
            "latency": {
              "current": $LATENCY,
              "threshold": $LATENCY_THRESHOLD,
              "status": "$([ $LATENCY -le $LATENCY_THRESHOLD ] && echo "pass" || echo "fail")"
            }
          },
          "health_checks": {
            "application_health": "healthy",
            "database_connectivity": "healthy",
            "external_services": "healthy",
            "memory_usage": "healthy",
            "cpu_usage": "healthy"
          },
          "recommendation": "$([ "$MONITORING_RESULT" = "healthy" ] && echo "promote" || echo "rollback")"
        }
        EOF
        
        echo "monitoring-result=$MONITORING_RESULT" >> $GITHUB_OUTPUT
        
        # Trigger automatic action based on monitoring result and strategy
        if [ "${{ inputs.promotion-strategy }}" = "automatic" ]; then
          if [ "$MONITORING_RESULT" = "healthy" ]; then
            echo "‚úÖ Canary is healthy - ready for automatic promotion"
            echo "TRIGGER_PROMOTION=true" >> $GITHUB_ENV
          else
            echo "‚ùå Canary is unhealthy - triggering automatic rollback"
            echo "TRIGGER_ROLLBACK=true" >> $GITHUB_ENV
          fi
        fi
        
        echo "üìä Monitoring completed: $MONITORING_RESULT"

    - name: üìà Automatic Promotion
      if: env.TRIGGER_PROMOTION == 'true'
      shell: bash
      working-directory: ${{ inputs.working-directory }}
      run: |
        echo "üìà Executing automatic promotion..."
        
        # Promote canary to 100% traffic
        echo "100" > canary/traffic-routing/canary-percentage
        echo "promoted" > canary/canary/status
        
        echo "‚úÖ Automatic promotion completed"

    - name: üö® Automatic Rollback
      if: env.TRIGGER_ROLLBACK == 'true'
      shell: bash
      working-directory: ${{ inputs.working-directory }}
      run: |
        echo "üö® Executing automatic rollback..."
        
        # Route all traffic back to stable
        echo "0" > canary/traffic-routing/canary-percentage
        echo "rolled_back" > canary/canary/status
        
        echo "‚úÖ Automatic rollback completed"

    - name: üìä Generate Canary Summary
      if: always()
      shell: bash
      run: |
        echo "## üê§ Canary Deployment Summary" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "| Component | Value |" >> $GITHUB_STEP_SUMMARY
        echo "|-----------|-------|" >> $GITHUB_STEP_SUMMARY
        echo "| **Operation** | ${{ inputs.operation }} |" >> $GITHUB_STEP_SUMMARY
        echo "| **Environment** | ${{ inputs.environment }} |" >> $GITHUB_STEP_SUMMARY
        echo "| **Result** | ${{ steps.deploy.outputs.deployment-result }} |" >> $GITHUB_STEP_SUMMARY
        echo "| **Canary Status** | ${{ steps.deploy.outputs.canary-status }} |" >> $GITHUB_STEP_SUMMARY
        echo "| **Traffic Percentage** | ${{ steps.deploy.outputs.traffic-percentage }}% |" >> $GITHUB_STEP_SUMMARY
        echo "| **Deployment ID** | ${{ steps.deploy.outputs.deployment-id }} |" >> $GITHUB_STEP_SUMMARY
        
        if [ "${{ inputs.operation }}" = "deploy" ] || [ "${{ inputs.operation }}" = "monitor" ]; then
          echo "| **Monitoring Result** | ${{ steps.monitor.outputs.monitoring-result }} |" >> $GITHUB_STEP_SUMMARY
        fi
        
        echo "" >> $GITHUB_STEP_SUMMARY
        
        # Add operation-specific details
        case "${{ inputs.operation }}" in
          "deploy")
            echo "### üöÄ Canary Deployment Details" >> $GITHUB_STEP_SUMMARY
            echo "- **Canary Percentage**: ${{ inputs.canary-percentage }}%" >> $GITHUB_STEP_SUMMARY
            echo "- **Promotion Strategy**: ${{ inputs.promotion-strategy }}" >> $GITHUB_STEP_SUMMARY
            echo "- **Monitoring Duration**: ${{ inputs.monitoring-duration }} minutes" >> $GITHUB_STEP_SUMMARY
            echo "- **Error Threshold**: ${{ inputs.error-threshold }}%" >> $GITHUB_STEP_SUMMARY
            echo "- **Latency Threshold**: ${{ inputs.latency-threshold }}ms" >> $GITHUB_STEP_SUMMARY
            ;;
          "promote")
            echo "### üìà Promotion Details" >> $GITHUB_STEP_SUMMARY
            echo "- **Promotion Strategy**: Gradual (25% ‚Üí 50% ‚Üí 75% ‚Üí 100%)" >> $GITHUB_STEP_SUMMARY
            echo "- **Final Status**: Canary promoted to stable" >> $GITHUB_STEP_SUMMARY
            ;;
          "rollback")
            echo "### ‚è™ Rollback Details" >> $GITHUB_STEP_SUMMARY
            echo "- **Rollback Reason**: Manual trigger or health check failure" >> $GITHUB_STEP_SUMMARY
            echo "- **Traffic Routing**: 100% to stable, 0% to canary" >> $GITHUB_STEP_SUMMARY
            ;;
          "monitor")
            echo "### üìä Monitoring Details" >> $GITHUB_STEP_SUMMARY
            echo "- **Monitoring Result**: ${{ steps.monitor.outputs.monitoring-result }}" >> $GITHUB_STEP_SUMMARY
            echo "- **Current Traffic**: ${{ steps.deploy.outputs.traffic-percentage }}%" >> $GITHUB_STEP_SUMMARY
            ;;
        esac
        
        # Add status indicator
        if [ "${{ steps.deploy.outputs.deployment-result }}" = "success" ]; then
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### ‚úÖ Operation Completed Successfully" >> $GITHUB_STEP_SUMMARY
        else
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### ‚ùå Operation Failed" >> $GITHUB_STEP_SUMMARY
        fi

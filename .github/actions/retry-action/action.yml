name: 'Retry Action'
description: 'Retries commands with configurable backoff and failure analysis'
branding:
  icon: 'refresh-cw'
  color: 'blue'

inputs:
  command:
    description: 'Command to retry'
    required: true
  max_attempts:
    description: 'Maximum number of attempts'
    required: false
    default: '3'
  retry_wait_seconds:
    description: 'Initial wait time between retries in seconds'
    required: false
    default: '30'
  timeout_minutes:
    description: 'Timeout for each attempt in minutes'
    required: false
    default: '15'
  retry_on:
    description: 'When to retry (error, timeout, any)'
    required: false
    default: 'error'
  exponential_backoff:
    description: 'Use exponential backoff for wait times'
    required: false
    default: 'true'
  working_directory:
    description: 'Working directory for command execution'
    required: false
    default: '.'
  failure_analysis:
    description: 'Analyze failure patterns for retry decisions'
    required: false
    default: 'true'

outputs:
  attempts_made:
    description: 'Number of attempts made'
    value: ${{ steps.retry.outputs.attempts_made }}
  final_result:
    description: 'Final result (success, failure, timeout)'
    value: ${{ steps.retry.outputs.final_result }}
  retry_reason:
    description: 'Reason for retries'
    value: ${{ steps.retry.outputs.retry_reason }}
  total_duration:
    description: 'Total duration including retries'
    value: ${{ steps.retry.outputs.total_duration }}

runs:
  using: 'composite'
  steps:
    - name: üîÑ Execute Command with Retry Logic
      id: retry
      shell: bash
      working-directory: ${{ inputs.working_directory }}
      run: |
        # Retry configuration
        MAX_ATTEMPTS=${{ inputs.max_attempts }}
        INITIAL_WAIT=${{ inputs.retry_wait_seconds }}
        TIMEOUT_MINUTES=${{ inputs.timeout_minutes }}
        RETRY_ON="${{ inputs.retry_on }}"
        EXPONENTIAL_BACKOFF="${{ inputs.exponential_backoff }}"
        FAILURE_ANALYSIS="${{ inputs.failure_analysis }}"
        COMMAND="${{ inputs.command }}"
        
        # Initialize variables
        attempt=1
        wait_time=$INITIAL_WAIT
        start_time=$(date +%s)
        retry_reasons=()
        
        echo "üîÑ Starting retry execution with max $MAX_ATTEMPTS attempts"
        echo "Command: $COMMAND"
        echo "Timeout per attempt: ${TIMEOUT_MINUTES}m"
        echo "Initial wait time: ${INITIAL_WAIT}s"
        echo "Exponential backoff: $EXPONENTIAL_BACKOFF"
        
        while [ $attempt -le $MAX_ATTEMPTS ]; do
          echo ""
          echo "üìç Attempt $attempt/$MAX_ATTEMPTS"
          echo "‚è∞ $(date '+%Y-%m-%d %H:%M:%S UTC')"
          
          # Execute command with timeout
          attempt_start=$(date +%s)
          
          if timeout ${TIMEOUT_MINUTES}m bash -c "$COMMAND"; then
            attempt_end=$(date +%s)
            attempt_duration=$((attempt_end - attempt_start))
            total_duration=$((attempt_end - start_time))
            
            echo "‚úÖ Command succeeded on attempt $attempt"
            echo "‚è±Ô∏è Attempt duration: ${attempt_duration}s"
            echo "‚è±Ô∏è Total duration: ${total_duration}s"
            
            # Set outputs
            echo "attempts_made=$attempt" >> $GITHUB_OUTPUT
            echo "final_result=success" >> $GITHUB_OUTPUT
            echo "retry_reason=${retry_reasons[*]}" >> $GITHUB_OUTPUT
            echo "total_duration=${total_duration}s" >> $GITHUB_OUTPUT
            
            # Add success summary
            echo "## ‚úÖ Command Execution Summary" >> $GITHUB_STEP_SUMMARY
            echo "- **Result**: Success" >> $GITHUB_STEP_SUMMARY
            echo "- **Attempts**: $attempt/$MAX_ATTEMPTS" >> $GITHUB_STEP_SUMMARY
            echo "- **Total Duration**: ${total_duration}s" >> $GITHUB_STEP_SUMMARY
            if [ ${#retry_reasons[@]} -gt 0 ]; then
              echo "- **Retry Reasons**: ${retry_reasons[*]}" >> $GITHUB_STEP_SUMMARY
            fi
            
            exit 0
          fi
          
          # Command failed
          exit_code=$?
          attempt_end=$(date +%s)
          attempt_duration=$((attempt_end - attempt_start))
          
          echo "‚ùå Command failed on attempt $attempt (exit code: $exit_code)"
          echo "‚è±Ô∏è Attempt duration: ${attempt_duration}s"
          
          # Analyze failure if enabled
          failure_reason="unknown"
          if [ "$FAILURE_ANALYSIS" = "true" ]; then
            if [ $exit_code -eq 124 ]; then
              failure_reason="timeout"
            elif [ $exit_code -eq 130 ]; then
              failure_reason="interrupted"
            elif [ $exit_code -ge 1 ] && [ $exit_code -le 2 ]; then
              failure_reason="general_error"
            else
              failure_reason="exit_code_$exit_code"
            fi
          fi
          
          retry_reasons+=("attempt_${attempt}:${failure_reason}")
          
          # Check if we should retry
          should_retry=false
          case "$RETRY_ON" in
            "error")
              if [ $exit_code -ne 0 ] && [ $exit_code -ne 124 ]; then
                should_retry=true
              fi
              ;;
            "timeout")
              if [ $exit_code -eq 124 ]; then
                should_retry=true
              fi
              ;;
            "any"|*)
              should_retry=true
              ;;
          esac
          
          # If this was the last attempt or we shouldn't retry, fail
          if [ $attempt -eq $MAX_ATTEMPTS ] || [ "$should_retry" = "false" ]; then
            total_duration=$((attempt_end - start_time))
            
            echo "üí• All retry attempts exhausted or retry not applicable"
            echo "‚è±Ô∏è Total duration: ${total_duration}s"
            
            # Set outputs
            echo "attempts_made=$attempt" >> $GITHUB_OUTPUT
            echo "final_result=failure" >> $GITHUB_OUTPUT
            echo "retry_reason=${retry_reasons[*]}" >> $GITHUB_OUTPUT
            echo "total_duration=${total_duration}s" >> $GITHUB_OUTPUT
            
            # Add failure summary
            echo "## ‚ùå Command Execution Summary" >> $GITHUB_STEP_SUMMARY
            echo "- **Result**: Failure" >> $GITHUB_STEP_SUMMARY
            echo "- **Attempts**: $attempt/$MAX_ATTEMPTS" >> $GITHUB_STEP_SUMMARY
            echo "- **Total Duration**: ${total_duration}s" >> $GITHUB_STEP_SUMMARY
            echo "- **Final Exit Code**: $exit_code" >> $GITHUB_STEP_SUMMARY
            echo "- **Retry Reasons**: ${retry_reasons[*]}" >> $GITHUB_STEP_SUMMARY
            
            exit $exit_code
          fi
          
          # Wait before next attempt
          echo "‚è≥ Waiting ${wait_time}s before next attempt..."
          sleep $wait_time
          
          # Calculate next wait time with exponential backoff
          if [ "$EXPONENTIAL_BACKOFF" = "true" ]; then
            wait_time=$((wait_time * 2))
            # Cap at 5 minutes
            if [ $wait_time -gt 300 ]; then
              wait_time=300
            fi
          fi
          
          attempt=$((attempt + 1))
        done

name: 'Manage Artifacts'
description: 'Upload and manage workflow artifacts with intelligent organization'
branding:
  icon: 'archive'
  color: 'purple'

inputs:
  action:
    description: 'Action to perform (upload, download, list)'
    required: true
  name:
    description: 'Artifact name'
    required: false
    default: ''
  path:
    description: 'Path to files/directory for upload or download destination'
    required: false
    default: '.'
  include-patterns:
    description: 'File patterns to include (newline-separated)'
    required: false
    default: ''
  exclude-patterns:
    description: 'File patterns to exclude (newline-separated)'
    required: false
    default: ''
  retention-days:
    description: 'Number of days to retain artifacts'
    required: false
    default: '30'
  compression-level:
    description: 'Compression level (0-9, 6 is default)'
    required: false
    default: '6'
  if-no-files-found:
    description: 'What to do if no files found (warn, error, ignore)'
    required: false
    default: 'warn'
  working-directory:
    description: 'Working directory for operations'
    required: false
    default: '.'
  auto-organize:
    description: 'Automatically organize artifacts by type'
    required: false
    default: 'true'
  merge-multiple:
    description: 'Merge multiple artifacts into one'
    required: false
    default: 'false'

outputs:
  artifact-id:
    description: 'ID of uploaded/downloaded artifact'
    value: ${{ steps.manage.outputs.artifact-id }}
  artifact-url:
    description: 'URL of the artifact'
    value: ${{ steps.manage.outputs.artifact-url }}
  files-count:
    description: 'Number of files in artifact'
    value: ${{ steps.manage.outputs.files-count }}
  total-size:
    description: 'Total size of artifact in bytes'
    value: ${{ steps.manage.outputs.total-size }}
  operation-result:
    description: 'Result of the operation (success, partial, failed)'
    value: ${{ steps.manage.outputs.operation-result }}

runs:
  using: 'composite'
  steps:
    - name: üì¶ Manage Artifacts
      id: manage
      shell: bash
      working-directory: ${{ inputs.working-directory }}
      run: |
        echo "üì¶ Managing artifacts..."
        echo "Action: ${{ inputs.action }}"
        echo "Name: ${{ inputs.name }}"
        echo "Path: ${{ inputs.path }}"
        echo "Auto-organize: ${{ inputs.auto-organize }}"
        
        operation_result="failed"
        artifact_id=""
        artifact_url=""
        files_count=0
        total_size=0
        
        case "${{ inputs.action }}" in
          "upload")
            echo "üì§ Preparing artifact upload..."
            
            # Determine artifact name
            if [ -z "${{ inputs.name }}" ]; then
              # Auto-generate name based on context
              if [ "${{ inputs.auto-organize }}" = "true" ]; then
                artifact_name="artifacts-${{ github.job }}-${{ github.run_id }}"
              else
                artifact_name="artifacts-${{ github.run_id }}"
              fi
            else
              artifact_name="${{ inputs.name }}"
            fi
            
            # Check if path exists
            if [ ! -e "${{ inputs.path }}" ]; then
              echo "‚ö†Ô∏è Path does not exist: ${{ inputs.path }}"
              if [ "${{ inputs.if-no-files-found }}" = "error" ]; then
                echo "‚ùå No files found and if-no-files-found is set to error"
                operation_result="failed"
              else
                echo "‚ö†Ô∏è No files found, continuing with warning"
                operation_result="partial"
              fi
            else
              # Count files and calculate size
              if [ -d "${{ inputs.path }}" ]; then
                files_count=$(find "${{ inputs.path }}" -type f | wc -l)
                total_size=$(du -sb "${{ inputs.path }}" | cut -f1)
              else
                files_count=1
                total_size=$(stat -c%s "${{ inputs.path }}" 2>/dev/null || stat -f%z "${{ inputs.path }}" 2>/dev/null || echo "0")
              fi
              
              echo "üìä Artifact statistics:"
              echo "  Files: $files_count"
              echo "  Total size: $total_size bytes ($(numfmt --to=iec $total_size 2>/dev/null || echo "$total_size bytes"))"
              
              if [ $files_count -gt 0 ]; then
                operation_result="success"
              else
                operation_result="partial"
              fi
            fi
            
            # Set outputs for upload (actual upload will be done by subsequent step)
            echo "artifact-name=$artifact_name" >> $GITHUB_ENV
            ;;
            
          "download")
            echo "üì• Preparing artifact download..."
            
            if [ -z "${{ inputs.name }}" ]; then
              echo "‚ùå Artifact name is required for download"
              operation_result="failed"
            else
              # Create download directory if it doesn't exist
              mkdir -p "${{ inputs.path }}"
              operation_result="success"
            fi
            ;;
            
          "list")
            echo "üìã Listing artifacts..."
            # This would typically use GitHub API to list artifacts
            echo "‚ÑπÔ∏è Artifact listing not implemented in composite action"
            operation_result="success"
            ;;
            
          *)
            echo "‚ùå Unknown action: ${{ inputs.action }}"
            operation_result="failed"
            ;;
        esac
        
        # Set outputs
        echo "operation-result=$operation_result" >> $GITHUB_OUTPUT
        echo "files-count=$files_count" >> $GITHUB_OUTPUT
        echo "total-size=$total_size" >> $GITHUB_OUTPUT
        
        echo "üìä Operation result: $operation_result"

    - name: üì§ Upload Artifact
      if: inputs.action == 'upload' && steps.manage.outputs.operation-result != 'failed'
      uses: actions/upload-artifact@v4
      with:
        name: ${{ env.artifact-name }}
        path: ${{ inputs.path }}
        retention-days: ${{ inputs.retention-days }}
        compression-level: ${{ inputs.compression-level }}
        if-no-files-found: ${{ inputs.if-no-files-found }}
        include-hidden-files: false

    - name: üì• Download Artifact
      if: inputs.action == 'download'
      uses: actions/download-artifact@v4
      with:
        name: ${{ inputs.name }}
        path: ${{ inputs.path }}

    - name: üîç Verify Operation
      if: always()
      shell: bash
      working-directory: ${{ inputs.working-directory }}
      run: |
        echo "üîç Verifying artifact operation..."
        
        case "${{ inputs.action }}" in
          "upload")
            if [ -e "${{ inputs.path }}" ]; then
              echo "‚úÖ Upload source verified"
              
              # Show directory structure for verification
              if [ -d "${{ inputs.path }}" ]; then
                echo "üìÅ Directory structure:"
                find "${{ inputs.path }}" -type f | head -20 | while read file; do
                  size=$(stat -c%s "$file" 2>/dev/null || stat -f%z "$file" 2>/dev/null || echo "0")
                  echo "  $file ($(numfmt --to=iec $size 2>/dev/null || echo "$size bytes"))"
                done
                
                if [ $(find "${{ inputs.path }}" -type f | wc -l) -gt 20 ]; then
                  echo "  ... and $(($(find "${{ inputs.path }}" -type f | wc -l) - 20)) more files"
                fi
              fi
            else
              echo "‚ö†Ô∏è Upload source not found"
            fi
            ;;
            
          "download")
            if [ -d "${{ inputs.path }}" ] && [ "$(ls -A "${{ inputs.path }}")" ]; then
              echo "‚úÖ Download completed successfully"
              echo "üìÅ Downloaded files:"
              ls -la "${{ inputs.path }}" | head -10
            else
              echo "‚ö†Ô∏è Download directory is empty or doesn't exist"
            fi
            ;;
        esac

    - name: üìä Generate Artifact Summary
      if: always()
      shell: bash
      run: |
        echo "## üì¶ Artifact Management Summary" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "| Component | Value |" >> $GITHUB_STEP_SUMMARY
        echo "|-----------|-------|" >> $GITHUB_STEP_SUMMARY
        echo "| **Action** | ${{ inputs.action }} |" >> $GITHUB_STEP_SUMMARY
        echo "| **Result** | ${{ steps.manage.outputs.operation-result }} |" >> $GITHUB_STEP_SUMMARY
        
        if [ -n "${{ inputs.name }}" ]; then
          echo "| **Artifact Name** | \`${{ inputs.name }}\` |" >> $GITHUB_STEP_SUMMARY
        elif [ -n "${{ env.artifact-name }}" ]; then
          echo "| **Artifact Name** | \`${{ env.artifact-name }}\` |" >> $GITHUB_STEP_SUMMARY
        fi
        
        echo "| **Path** | \`${{ inputs.path }}\` |" >> $GITHUB_STEP_SUMMARY
        echo "| **Files Count** | ${{ steps.manage.outputs.files-count }} |" >> $GITHUB_STEP_SUMMARY
        
        if [ "${{ steps.manage.outputs.total-size }}" != "0" ]; then
          size_human=$(numfmt --to=iec ${{ steps.manage.outputs.total-size }} 2>/dev/null || echo "${{ steps.manage.outputs.total-size }} bytes")
          echo "| **Total Size** | $size_human |" >> $GITHUB_STEP_SUMMARY
        fi
        
        if [ "${{ inputs.action }}" = "upload" ]; then
          echo "| **Retention Days** | ${{ inputs.retention-days }} |" >> $GITHUB_STEP_SUMMARY
          echo "| **Compression Level** | ${{ inputs.compression-level }} |" >> $GITHUB_STEP_SUMMARY
        fi
        
        echo "" >> $GITHUB_STEP_SUMMARY
        
        # Add status emoji
        case "${{ steps.manage.outputs.operation-result }}" in
          "success")
            echo "### ‚úÖ Operation Completed Successfully" >> $GITHUB_STEP_SUMMARY
            ;;
          "partial")
            echo "### ‚ö†Ô∏è Operation Completed with Warnings" >> $GITHUB_STEP_SUMMARY
            ;;
          "failed")
            echo "### ‚ùå Operation Failed" >> $GITHUB_STEP_SUMMARY
            ;;
        esac

name: 'Advanced Cache Management'
description: 'Multi-layer caching with intelligent key generation and cache warming'
branding:
  icon: 'database'
  color: 'green'

inputs:
  cache-type:
    description: 'Type of cache (dependencies, docker, artifacts, build)'
    required: true
  cache-key:
    description: 'Primary cache key'
    required: false
    default: ''
  cache-paths:
    description: 'Paths to cache (newline-separated)'
    required: true
  restore-keys:
    description: 'Fallback cache keys (newline-separated)'
    required: false
    default: ''
  working-directory:
    description: 'Working directory for cache operations'
    required: false
    default: '.'
  enable-compression:
    description: 'Enable cache compression'
    required: false
    default: 'true'
  cache-warming:
    description: 'Enable cache warming strategies'
    required: false
    default: 'true'
  max-cache-size:
    description: 'Maximum cache size in MB'
    required: false
    default: '1024'
  ttl-days:
    description: 'Cache TTL in days'
    required: false
    default: '7'
  parallel-restore:
    description: 'Enable parallel cache restoration'
    required: false
    default: 'true'

outputs:
  cache-hit:
    description: 'Whether cache was hit'
    value: ${{ steps.cache.outputs.cache-hit }}
  cache-key:
    description: 'Actual cache key used'
    value: ${{ steps.generate-key.outputs.cache-key }}
  cache-size:
    description: 'Size of cached data in bytes'
    value: ${{ steps.analyze.outputs.cache-size }}
  cache-efficiency:
    description: 'Cache efficiency percentage'
    value: ${{ steps.analyze.outputs.cache-efficiency }}

runs:
  using: 'composite'
  steps:
    - name: 🔑 Generate Intelligent Cache Key
      id: generate-key
      shell: bash
      working-directory: ${{ inputs.working-directory }}
      run: |
        echo "🔑 Generating intelligent cache key for: ${{ inputs.cache-type }}"
        
        # Base key components
        base_key="${{ inputs.cache-type }}"
        os_key="${{ runner.os }}"
        arch_key="${{ runner.arch }}"
        
        # Generate cache key based on type
        case "${{ inputs.cache-type }}" in
          "dependencies")
            echo "📦 Generating dependency cache key..."
            
            # Hash dependency files
            dep_hash=""
            if [ -f "pyproject.toml" ]; then
              dep_hash="${dep_hash}-$(sha256sum pyproject.toml | cut -d' ' -f1 | head -c 8)"
            fi
            if [ -f "requirements.txt" ]; then
              dep_hash="${dep_hash}-$(sha256sum requirements.txt | cut -d' ' -f1 | head -c 8)"
            fi
            if [ -f "requirements-dev.txt" ]; then
              dep_hash="${dep_hash}-$(sha256sum requirements-dev.txt | cut -d' ' -f1 | head -c 8)"
            fi
            if [ -f "package.json" ]; then
              dep_hash="${dep_hash}-$(sha256sum package.json | cut -d' ' -f1 | head -c 8)"
            fi
            if [ -f "Pipfile.lock" ]; then
              dep_hash="${dep_hash}-$(sha256sum Pipfile.lock | cut -d' ' -f1 | head -c 8)"
            fi
            
            # Python version for Python dependencies
            if command -v python3 >/dev/null 2>&1; then
              python_version=$(python3 --version | cut -d' ' -f2 | cut -d'.' -f1-2)
              cache_key="${base_key}-${os_key}-${arch_key}-py${python_version}${dep_hash}"
            else
              cache_key="${base_key}-${os_key}-${arch_key}${dep_hash}"
            fi
            ;;
            
          "docker")
            echo "🐳 Generating Docker cache key..."
            
            # Hash Dockerfile and related files
            docker_hash=""
            if [ -f "Dockerfile" ]; then
              docker_hash="${docker_hash}-$(sha256sum Dockerfile | cut -d' ' -f1 | head -c 8)"
            fi
            if [ -f "docker-compose.yml" ]; then
              docker_hash="${docker_hash}-$(sha256sum docker-compose.yml | cut -d' ' -f1 | head -c 8)"
            fi
            if [ -f ".dockerignore" ]; then
              docker_hash="${docker_hash}-$(sha256sum .dockerignore | cut -d' ' -f1 | head -c 8)"
            fi
            
            cache_key="${base_key}-${os_key}${docker_hash}"
            ;;
            
          "artifacts")
            echo "📁 Generating artifacts cache key..."
            
            # Use git commit hash and timestamp
            git_hash=$(git rev-parse --short HEAD 2>/dev/null || echo "nogit")
            timestamp=$(date +%Y%m%d)
            
            cache_key="${base_key}-${os_key}-${git_hash}-${timestamp}"
            ;;
            
          "build")
            echo "🏗️ Generating build cache key..."
            
            # Hash source files that affect build
            build_hash=""
            if [ -d "src" ]; then
              build_hash="${build_hash}-$(find src -name "*.py" -o -name "*.js" -o -name "*.ts" | sort | xargs sha256sum | sha256sum | cut -d' ' -f1 | head -c 8)"
            fi
            if [ -f "setup.py" ]; then
              build_hash="${build_hash}-$(sha256sum setup.py | cut -d' ' -f1 | head -c 8)"
            fi
            if [ -f "pyproject.toml" ]; then
              build_hash="${build_hash}-$(sha256sum pyproject.toml | cut -d' ' -f1 | head -c 8)"
            fi
            
            cache_key="${base_key}-${os_key}-${arch_key}${build_hash}"
            ;;
            
          *)
            # Custom cache key
            if [ -n "${{ inputs.cache-key }}" ]; then
              cache_key="${{ inputs.cache-key }}"
            else
              cache_key="${base_key}-${os_key}-$(date +%Y%m%d)"
            fi
            ;;
        esac
        
        echo "🔑 Generated cache key: $cache_key"
        echo "cache-key=$cache_key" >> $GITHUB_OUTPUT

    - name: 🔄 Generate Restore Keys
      id: restore-keys
      shell: bash
      run: |
        echo "🔄 Generating restore keys..."
        
        primary_key="${{ steps.generate-key.outputs.cache-key }}"
        restore_keys_input="${{ inputs.restore-keys }}"
        
        # Generate fallback keys based on cache type
        case "${{ inputs.cache-type }}" in
          "dependencies")
            # Fallback to same OS/arch with different dependency versions
            base_pattern="${{ inputs.cache-type }}-${{ runner.os }}-${{ runner.arch }}"
            restore_keys="$base_pattern-py3.12
            $base_pattern-py3.11
            $base_pattern"
            ;;
          "docker")
            # Fallback to same OS with different Docker versions
            base_pattern="${{ inputs.cache-type }}-${{ runner.os }}"
            restore_keys="$base_pattern"
            ;;
          "artifacts")
            # Fallback to same day, then same week
            base_pattern="${{ inputs.cache-type }}-${{ runner.os }}"
            today=$(date +%Y%m%d)
            yesterday=$(date -d '1 day ago' +%Y%m%d 2>/dev/null || date -v-1d +%Y%m%d 2>/dev/null || echo "$today")
            restore_keys="$base_pattern-$(git rev-parse --short HEAD~1 2>/dev/null || echo 'prev')-$today
            $base_pattern-$(git rev-parse --short HEAD 2>/dev/null || echo 'curr')-$yesterday
            $base_pattern"
            ;;
          "build")
            # Fallback to same OS/arch with different build versions
            base_pattern="${{ inputs.cache-type }}-${{ runner.os }}-${{ runner.arch }}"
            restore_keys="$base_pattern"
            ;;
          *)
            restore_keys="${{ inputs.cache-type }}-${{ runner.os }}"
            ;;
        esac
        
        # Add custom restore keys if provided
        if [ -n "$restore_keys_input" ]; then
          restore_keys="$restore_keys_input
          $restore_keys"
        fi
        
        # Clean up and format restore keys
        restore_keys=$(echo "$restore_keys" | grep -v "^$" | head -10)  # Limit to 10 keys
        
        echo "🔄 Restore keys:"
        echo "$restore_keys" | while read -r key; do
          [ -n "$key" ] && echo "  - $key"
        done
        
        # Set output (GitHub Actions format)
        {
          echo "restore-keys<<EOF"
          echo "$restore_keys"
          echo "EOF"
        } >> $GITHUB_OUTPUT

    - name: 💾 Restore Cache
      id: cache
      uses: actions/cache@v4
      with:
        path: ${{ inputs.cache-paths }}
        key: ${{ steps.generate-key.outputs.cache-key }}
        restore-keys: ${{ steps.restore-keys.outputs.restore-keys }}
        enableCrossOsArchive: false
        fail-on-cache-miss: false

    - name: 🔥 Cache Warming
      if: inputs.cache-warming == 'true' && steps.cache.outputs.cache-hit != 'true'
      shell: bash
      working-directory: ${{ inputs.working-directory }}
      run: |
        echo "🔥 Performing cache warming for: ${{ inputs.cache-type }}"
        
        case "${{ inputs.cache-type }}" in
          "dependencies")
            echo "📦 Warming dependency cache..."
            
            # Pre-download common packages
            if command -v pip >/dev/null 2>&1; then
              echo "Pre-downloading common Python packages..."
              pip download --dest /tmp/pip-cache --no-deps \
                wheel setuptools pip pytest requests flask fastapi || true
            fi
            
            if command -v npm >/dev/null 2>&1; then
              echo "Pre-downloading common Node packages..."
              npm cache verify || true
            fi
            ;;
            
          "docker")
            echo "🐳 Warming Docker cache..."
            
            # Pull common base images
            docker pull python:3.12-slim || true
            docker pull node:18-alpine || true
            docker pull nginx:alpine || true
            ;;
            
          "build")
            echo "🏗️ Warming build cache..."
            
            # Pre-compile common modules
            if command -v python3 >/dev/null 2>&1; then
              python3 -c "import compileall; compileall.compile_dir('.', quiet=1)" || true
            fi
            ;;
        esac
        
        echo "✅ Cache warming completed"

    - name: 📊 Analyze Cache Performance
      id: analyze
      if: always()
      shell: bash
      working-directory: ${{ inputs.working-directory }}
      run: |
        echo "📊 Analyzing cache performance..."
        
        cache_hit="${{ steps.cache.outputs.cache-hit }}"
        cache_key="${{ steps.generate-key.outputs.cache-key }}"
        
        # Calculate cache size
        cache_size=0
        cache_paths="${{ inputs.cache-paths }}"
        
        while IFS= read -r path; do
          if [ -n "$path" ] && [ -e "$path" ]; then
            if [ -d "$path" ]; then
              size=$(du -sb "$path" 2>/dev/null | cut -f1 || echo "0")
            else
              size=$(stat -c%s "$path" 2>/dev/null || stat -f%z "$path" 2>/dev/null || echo "0")
            fi
            cache_size=$((cache_size + size))
          fi
        done <<< "$cache_paths"
        
        # Calculate cache efficiency
        if [ "$cache_hit" = "true" ]; then
          cache_efficiency=100
        else
          # Estimate efficiency based on partial matches
          cache_efficiency=0
        fi
        
        # Convert size to human readable
        if [ $cache_size -gt 1073741824 ]; then
          size_human="$(echo "scale=1; $cache_size / 1073741824" | bc)GB"
        elif [ $cache_size -gt 1048576 ]; then
          size_human="$(echo "scale=1; $cache_size / 1048576" | bc)MB"
        elif [ $cache_size -gt 1024 ]; then
          size_human="$(echo "scale=1; $cache_size / 1024" | bc)KB"
        else
          size_human="${cache_size}B"
        fi
        
        echo "📊 Cache Analysis Results:"
        echo "  Cache Hit: $cache_hit"
        echo "  Cache Key: $cache_key"
        echo "  Cache Size: $size_human ($cache_size bytes)"
        echo "  Cache Efficiency: $cache_efficiency%"
        
        # Set outputs
        echo "cache-size=$cache_size" >> $GITHUB_OUTPUT
        echo "cache-efficiency=$cache_efficiency" >> $GITHUB_OUTPUT

    - name: 📈 Generate Cache Summary
      if: always()
      shell: bash
      run: |
        echo "## 💾 Cache Management Summary" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "| Component | Value |" >> $GITHUB_STEP_SUMMARY
        echo "|-----------|-------|" >> $GITHUB_STEP_SUMMARY
        echo "| **Cache Type** | ${{ inputs.cache-type }} |" >> $GITHUB_STEP_SUMMARY
        echo "| **Cache Hit** | ${{ steps.cache.outputs.cache-hit }} |" >> $GITHUB_STEP_SUMMARY
        echo "| **Cache Key** | \`${{ steps.generate-key.outputs.cache-key }}\` |" >> $GITHUB_STEP_SUMMARY
        echo "| **Cache Size** | ${{ steps.analyze.outputs.cache-size }} bytes |" >> $GITHUB_STEP_SUMMARY
        echo "| **Efficiency** | ${{ steps.analyze.outputs.cache-efficiency }}% |" >> $GITHUB_STEP_SUMMARY
        echo "| **Compression** | ${{ inputs.enable-compression }} |" >> $GITHUB_STEP_SUMMARY
        echo "| **Cache Warming** | ${{ inputs.cache-warming }} |" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        
        # Add status emoji
        if [ "${{ steps.cache.outputs.cache-hit }}" = "true" ]; then
          echo "### ✅ Cache Hit - Excellent Performance!" >> $GITHUB_STEP_SUMMARY
        else
          echo "### 🔄 Cache Miss - Building Cache for Future Runs" >> $GITHUB_STEP_SUMMARY
        fi

name: 'Cleanup Action'
description: 'Comprehensive cleanup for GitHub Actions workflows'
branding:
  icon: 'trash-2'
  color: 'red'

inputs:
  cleanup_type:
    description: 'Type of cleanup (containers, processes, files, all)'
    required: false
    default: 'all'
  working_directory:
    description: 'Working directory for cleanup operations'
    required: false
    default: '.'
  preserve_artifacts:
    description: 'Preserve test artifacts and reports'
    required: false
    default: 'true'
  force_cleanup:
    description: 'Force cleanup even if processes are running'
    required: false
    default: 'false'
  cleanup_timeout:
    description: 'Timeout for cleanup operations in seconds'
    required: false
    default: '300'

outputs:
  cleanup_summary:
    description: 'Summary of cleanup operations performed'
    value: ${{ steps.cleanup.outputs.cleanup_summary }}
  resources_cleaned:
    description: 'Number of resources cleaned up'
    value: ${{ steps.cleanup.outputs.resources_cleaned }}
  cleanup_duration:
    description: 'Time taken for cleanup operations'
    value: ${{ steps.cleanup.outputs.cleanup_duration }}

runs:
  using: 'composite'
  steps:
    - name: 🧹 Comprehensive Cleanup
      id: cleanup
      shell: bash
      working-directory: ${{ inputs.working_directory }}
      run: |
        # Cleanup configuration
        CLEANUP_TYPE="${{ inputs.cleanup_type }}"
        PRESERVE_ARTIFACTS="${{ inputs.preserve_artifacts }}"
        FORCE_CLEANUP="${{ inputs.force_cleanup }}"
        CLEANUP_TIMEOUT="${{ inputs.cleanup_timeout }}"
        
        # Initialize variables
        start_time=$(date +%s)
        resources_cleaned=0
        cleanup_operations=()
        
        echo "🧹 Starting comprehensive cleanup"
        echo "Cleanup type: $CLEANUP_TYPE"
        echo "Preserve artifacts: $PRESERVE_ARTIFACTS"
        echo "Force cleanup: $FORCE_CLEANUP"
        echo "Timeout: ${CLEANUP_TIMEOUT}s"
        echo ""
        
        # Function to add cleanup operation to summary
        add_cleanup_operation() {
          local operation="$1"
          local count="$2"
          cleanup_operations+=("$operation: $count")
          resources_cleaned=$((resources_cleaned + count))
          echo "✅ $operation: $count items"
        }
        
        # Function to safely kill processes
        safe_kill_processes() {
          local pattern="$1"
          local signal="${2:-TERM}"
          
          echo "🔍 Looking for processes matching: $pattern"
          local pids=$(pgrep -f "$pattern" 2>/dev/null || true)
          
          if [ -n "$pids" ]; then
            echo "📋 Found processes: $pids"
            
            # Try graceful shutdown first
            if [ "$signal" = "TERM" ]; then
              echo "🛑 Sending SIGTERM to processes..."
              echo "$pids" | xargs -r kill -TERM 2>/dev/null || true
              sleep 5
              
              # Check if processes are still running
              local remaining=$(echo "$pids" | xargs -r ps -p 2>/dev/null | wc -l)
              if [ "$remaining" -gt 1 ]; then
                echo "⚠️ Some processes still running, sending SIGKILL..."
                echo "$pids" | xargs -r kill -KILL 2>/dev/null || true
              fi
            else
              echo "💥 Sending SIG$signal to processes..."
              echo "$pids" | xargs -r kill -"$signal" 2>/dev/null || true
            fi
            
            return $(echo "$pids" | wc -w)
          else
            echo "ℹ️ No processes found matching: $pattern"
            return 0
          fi
        }
        
        # 1. CONTAINER CLEANUP
        if [ "$CLEANUP_TYPE" = "containers" ] || [ "$CLEANUP_TYPE" = "all" ]; then
          echo "🐳 Cleaning up Docker containers..."
          
          # Stop running containers
          running_containers=$(docker ps -q 2>/dev/null || true)
          if [ -n "$running_containers" ]; then
            echo "🛑 Stopping running containers..."
            echo "$running_containers" | xargs -r docker stop 2>/dev/null || true
            add_cleanup_operation "Stopped containers" $(echo "$running_containers" | wc -w)
          fi
          
          # Remove containers
          all_containers=$(docker ps -aq 2>/dev/null || true)
          if [ -n "$all_containers" ]; then
            echo "🗑️ Removing containers..."
            echo "$all_containers" | xargs -r docker rm -f 2>/dev/null || true
            add_cleanup_operation "Removed containers" $(echo "$all_containers" | wc -w)
          fi
          
          # Clean up networks (except default ones)
          custom_networks=$(docker network ls --filter "type=custom" -q 2>/dev/null || true)
          if [ -n "$custom_networks" ]; then
            echo "🌐 Removing custom networks..."
            echo "$custom_networks" | xargs -r docker network rm 2>/dev/null || true
            add_cleanup_operation "Removed networks" $(echo "$custom_networks" | wc -w)
          fi
          
          # Clean up volumes (be careful with this)
          if [ "$FORCE_CLEANUP" = "true" ]; then
            dangling_volumes=$(docker volume ls -qf dangling=true 2>/dev/null || true)
            if [ -n "$dangling_volumes" ]; then
              echo "💾 Removing dangling volumes..."
              echo "$dangling_volumes" | xargs -r docker volume rm 2>/dev/null || true
              add_cleanup_operation "Removed volumes" $(echo "$dangling_volumes" | wc -w)
            fi
          fi
          
          echo ""
        fi
        
        # 2. PROCESS CLEANUP
        if [ "$CLEANUP_TYPE" = "processes" ] || [ "$CLEANUP_TYPE" = "all" ]; then
          echo "⚙️ Cleaning up processes..."
          
          # Common development/test processes
          process_patterns=(
            "uvicorn"
            "gunicorn"
            "celery"
            "redis-server"
            "postgres"
            "mysql"
            "node.*server"
            "python.*manage.py.*runserver"
            "locust"
            "pytest.*"
            "python.*-m.*pytest"
          )
          
          for pattern in "${process_patterns[@]}"; do
            count=$(safe_kill_processes "$pattern")
            if [ "$count" -gt 0 ]; then
              add_cleanup_operation "Killed $pattern processes" "$count"
            fi
          done
          
          echo ""
        fi
        
        # 3. FILE CLEANUP
        if [ "$CLEANUP_TYPE" = "files" ] || [ "$CLEANUP_TYPE" = "all" ]; then
          echo "📁 Cleaning up temporary files..."
          
          # Temporary files and directories
          temp_patterns=(
            "*.tmp"
            "*.temp"
            "*.log"
            ".pytest_cache"
            "__pycache__"
            "*.pyc"
            ".coverage*"
            "htmlcov"
            "node_modules"
            ".tox"
            "dist"
            "build"
            "*.egg-info"
          )
          
          for pattern in "${temp_patterns[@]}"; do
            # Skip if we should preserve artifacts and this looks like an artifact
            if [ "$PRESERVE_ARTIFACTS" = "true" ]; then
              case "$pattern" in
                "*.xml"|"*.json"|"*.html"|"coverage*"|"htmlcov")
                  echo "🛡️ Preserving artifacts: $pattern"
                  continue
                  ;;
              esac
            fi
            
            # Find and remove files/directories
            found_items=$(find . -name "$pattern" -type f 2>/dev/null | wc -l)
            found_dirs=$(find . -name "$pattern" -type d 2>/dev/null | wc -l)
            
            if [ "$found_items" -gt 0 ]; then
              find . -name "$pattern" -type f -delete 2>/dev/null || true
              add_cleanup_operation "Removed $pattern files" "$found_items"
            fi
            
            if [ "$found_dirs" -gt 0 ]; then
              find . -name "$pattern" -type d -exec rm -rf {} + 2>/dev/null || true
              add_cleanup_operation "Removed $pattern directories" "$found_dirs"
            fi
          done
          
          # Clean up large files (>100MB)
          if [ "$FORCE_CLEANUP" = "true" ]; then
            large_files=$(find . -type f -size +100M 2>/dev/null | wc -l)
            if [ "$large_files" -gt 0 ]; then
              find . -type f -size +100M -delete 2>/dev/null || true
              add_cleanup_operation "Removed large files" "$large_files"
            fi
          fi
          
          echo ""
        fi
        
        # 4. SYSTEM CLEANUP
        if [ "$CLEANUP_TYPE" = "all" ]; then
          echo "🖥️ System cleanup..."
          
          # Clear package manager caches
          if command -v apt-get >/dev/null 2>&1; then
            echo "🧹 Cleaning apt cache..."
            sudo apt-get clean 2>/dev/null || true
            add_cleanup_operation "Cleaned apt cache" 1
          fi
          
          if command -v pip >/dev/null 2>&1; then
            echo "🧹 Cleaning pip cache..."
            pip cache purge 2>/dev/null || true
            add_cleanup_operation "Cleaned pip cache" 1
          fi
          
          if command -v npm >/dev/null 2>&1; then
            echo "🧹 Cleaning npm cache..."
            npm cache clean --force 2>/dev/null || true
            add_cleanup_operation "Cleaned npm cache" 1
          fi
          
          # Clear temporary directories
          temp_dirs=("/tmp" "/var/tmp")
          for temp_dir in "${temp_dirs[@]}"; do
            if [ -d "$temp_dir" ] && [ "$FORCE_CLEANUP" = "true" ]; then
              temp_files=$(find "$temp_dir" -type f -mtime +1 2>/dev/null | wc -l)
              if [ "$temp_files" -gt 0 ]; then
                sudo find "$temp_dir" -type f -mtime +1 -delete 2>/dev/null || true
                add_cleanup_operation "Cleaned $temp_dir" "$temp_files"
              fi
            fi
          done
          
          echo ""
        fi
        
        # Calculate cleanup duration
        end_time=$(date +%s)
        cleanup_duration=$((end_time - start_time))
        
        # Generate summary
        echo "📊 Cleanup Summary"
        echo "=================="
        echo "Total resources cleaned: $resources_cleaned"
        echo "Cleanup duration: ${cleanup_duration}s"
        echo "Operations performed:"
        
        if [ ${#cleanup_operations[@]} -eq 0 ]; then
          echo "  - No cleanup operations needed"
        else
          for operation in "${cleanup_operations[@]}"; do
            echo "  - $operation"
          done
        fi
        
        # Set outputs
        echo "cleanup_summary=${cleanup_operations[*]}" >> $GITHUB_OUTPUT
        echo "resources_cleaned=$resources_cleaned" >> $GITHUB_OUTPUT
        echo "cleanup_duration=${cleanup_duration}s" >> $GITHUB_OUTPUT
        
        # Add to step summary
        echo "## 🧹 Cleanup Summary" >> $GITHUB_STEP_SUMMARY
        echo "- **Total Resources Cleaned**: $resources_cleaned" >> $GITHUB_STEP_SUMMARY
        echo "- **Cleanup Duration**: ${cleanup_duration}s" >> $GITHUB_STEP_SUMMARY
        echo "- **Operations**: ${#cleanup_operations[@]}" >> $GITHUB_STEP_SUMMARY
        
        if [ ${#cleanup_operations[@]} -gt 0 ]; then
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### Operations Performed" >> $GITHUB_STEP_SUMMARY
          for operation in "${cleanup_operations[@]}"; do
            echo "- $operation" >> $GITHUB_STEP_SUMMARY
          done
        fi
        
        echo "✅ Cleanup completed successfully"

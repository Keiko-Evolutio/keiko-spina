name: 'Monitoring Action'
description: 'Collects metrics and provides observability for GitHub Actions workflows'
branding:
  icon: 'activity'
  color: 'green'

inputs:
  job_name:
    description: 'Name of the job being monitored'
    required: true
  step_name:
    description: 'Name of the step being monitored'
    required: false
    default: 'Unknown Step'
  metric_type:
    description: 'Type of metric (duration, success_rate, resource_usage, custom)'
    required: false
    default: 'duration'
  metric_value:
    description: 'Custom metric value'
    required: false
    default: ''
  tags:
    description: 'Additional tags for metrics (comma-separated key=value pairs)'
    required: false
    default: ''
  monitoring_endpoint:
    description: 'Endpoint for sending metrics (optional)'
    required: false
    default: ''
  collect_system_metrics:
    description: 'Collect system resource metrics'
    required: false
    default: 'true'

outputs:
  metrics_collected:
    description: 'Number of metrics collected'
    value: ${{ steps.collect.outputs.metrics_collected }}
  monitoring_report:
    description: 'Monitoring report summary'
    value: ${{ steps.collect.outputs.monitoring_report }}
  system_metrics:
    description: 'System resource metrics'
    value: ${{ steps.collect.outputs.system_metrics }}

runs:
  using: 'composite'
  steps:
    - name: 📊 Collect Metrics and Monitoring Data
      id: collect
      shell: bash
      run: |
        # Monitoring configuration
        JOB_NAME="${{ inputs.job_name }}"
        STEP_NAME="${{ inputs.step_name }}"
        METRIC_TYPE="${{ inputs.metric_type }}"
        METRIC_VALUE="${{ inputs.metric_value }}"
        TAGS="${{ inputs.tags }}"
        MONITORING_ENDPOINT="${{ inputs.monitoring_endpoint }}"
        COLLECT_SYSTEM_METRICS="${{ inputs.collect_system_metrics }}"
        
        # Initialize variables
        timestamp=$(date -u '+%Y-%m-%d %H:%M:%S UTC')
        metrics_collected=0
        monitoring_data=()
        
        echo "📊 Starting metrics collection"
        echo "Job: $JOB_NAME"
        echo "Step: $STEP_NAME"
        echo "Metric Type: $METRIC_TYPE"
        echo "Timestamp: $timestamp"
        echo ""
        
        # Create monitoring directory
        mkdir -p monitoring-data
        
        # Function to add metric
        add_metric() {
          local name="$1"
          local value="$2"
          local type="$3"
          local tags="$4"
          
          local metric_entry="$name,$type,$value,$timestamp,$tags"
          monitoring_data+=("$metric_entry")
          metrics_collected=$((metrics_collected + 1))
          
          echo "📈 Metric: $name = $value ($type)"
        }
        
        # 1. WORKFLOW METRICS
        echo "🔄 Collecting workflow metrics..."
        
        # Workflow execution time (if available from environment)
        if [ -n "$GITHUB_WORKFLOW_START_TIME" ]; then
          current_time=$(date +%s)
          workflow_duration=$((current_time - GITHUB_WORKFLOW_START_TIME))
          add_metric "workflow.duration" "$workflow_duration" "gauge" "workflow=${{ github.workflow }}"
        fi
        
        # Job metrics
        add_metric "job.execution" "1" "counter" "job=$JOB_NAME,status=running"
        add_metric "step.execution" "1" "counter" "job=$JOB_NAME,step=$STEP_NAME"
        
        # Repository metrics
        add_metric "repository.workflow_run" "1" "counter" "repo=${{ github.repository }},branch=${{ github.ref_name }}"
        
        echo ""
        
        # 2. SYSTEM METRICS
        if [ "$COLLECT_SYSTEM_METRICS" = "true" ]; then
          echo "🖥️ Collecting system metrics..."
          
          # CPU usage
          if command -v top >/dev/null 2>&1; then
            cpu_usage=$(top -bn1 | grep "Cpu(s)" | awk '{print $2}' | sed 's/%us,//' || echo "0")
            add_metric "system.cpu_usage" "$cpu_usage" "gauge" "runner=${{ runner.os }}"
          fi
          
          # Memory usage
          if command -v free >/dev/null 2>&1; then
            memory_total=$(free -m | awk 'NR==2{printf "%.1f", $2}')
            memory_used=$(free -m | awk 'NR==2{printf "%.1f", $3}')
            memory_percent=$(free -m | awk 'NR==2{printf "%.1f", $3*100/$2}')
            
            add_metric "system.memory_total_mb" "$memory_total" "gauge" "runner=${{ runner.os }}"
            add_metric "system.memory_used_mb" "$memory_used" "gauge" "runner=${{ runner.os }}"
            add_metric "system.memory_usage_percent" "$memory_percent" "gauge" "runner=${{ runner.os }}"
          fi
          
          # Disk usage
          if command -v df >/dev/null 2>&1; then
            disk_usage=$(df -h / | awk 'NR==2 {print $5}' | sed 's/%//')
            disk_available=$(df -h / | awk 'NR==2 {print $4}')
            
            add_metric "system.disk_usage_percent" "$disk_usage" "gauge" "runner=${{ runner.os }}"
            add_metric "system.disk_available" "$disk_available" "gauge" "runner=${{ runner.os }}"
          fi
          
          # Load average (Linux/macOS)
          if command -v uptime >/dev/null 2>&1; then
            load_avg=$(uptime | awk -F'load average:' '{print $2}' | awk '{print $1}' | sed 's/,//')
            add_metric "system.load_average" "$load_avg" "gauge" "runner=${{ runner.os }}"
          fi
          
          echo ""
        fi
        
        # 3. DOCKER METRICS (if Docker is available)
        if command -v docker >/dev/null 2>&1; then
          echo "🐳 Collecting Docker metrics..."
          
          # Container count
          running_containers=$(docker ps -q 2>/dev/null | wc -l)
          total_containers=$(docker ps -aq 2>/dev/null | wc -l)
          
          add_metric "docker.containers_running" "$running_containers" "gauge" "runner=${{ runner.os }}"
          add_metric "docker.containers_total" "$total_containers" "gauge" "runner=${{ runner.os }}"
          
          # Image count
          total_images=$(docker images -q 2>/dev/null | wc -l)
          add_metric "docker.images_total" "$total_images" "gauge" "runner=${{ runner.os }}"
          
          # Volume count
          total_volumes=$(docker volume ls -q 2>/dev/null | wc -l)
          add_metric "docker.volumes_total" "$total_volumes" "gauge" "runner=${{ runner.os }}"
          
          echo ""
        fi
        
        # 4. GITHUB ACTIONS SPECIFIC METRICS
        echo "⚙️ Collecting GitHub Actions metrics..."
        
        # Runner information
        add_metric "runner.os" "1" "info" "os=${{ runner.os }},arch=${{ runner.arch }}"
        add_metric "runner.temp_dir_size" "$(du -sm ${{ runner.temp }} 2>/dev/null | cut -f1 || echo 0)" "gauge" "runner=${{ runner.os }}"
        
        # Workflow context
        add_metric "workflow.run_number" "${{ github.run_number }}" "counter" "workflow=${{ github.workflow }}"
        add_metric "workflow.run_attempt" "${{ github.run_attempt }}" "counter" "workflow=${{ github.workflow }}"
        
        # Event information
        add_metric "workflow.event" "1" "counter" "event=${{ github.event_name }},workflow=${{ github.workflow }}"
        
        echo ""
        
        # 5. CUSTOM METRICS
        if [ -n "$METRIC_VALUE" ]; then
          echo "📊 Adding custom metric..."
          custom_tags="job=$JOB_NAME,step=$STEP_NAME"
          if [ -n "$TAGS" ]; then
            custom_tags="$custom_tags,$TAGS"
          fi
          add_metric "custom.$METRIC_TYPE" "$METRIC_VALUE" "$METRIC_TYPE" "$custom_tags"
          echo ""
        fi
        
        # 6. PERFORMANCE METRICS
        echo "⚡ Collecting performance metrics..."
        
        # Process count
        process_count=$(ps aux | wc -l)
        add_metric "system.process_count" "$process_count" "gauge" "runner=${{ runner.os }}"
        
        # Network connections (if available)
        if command -v netstat >/dev/null 2>&1; then
          network_connections=$(netstat -an 2>/dev/null | wc -l)
          add_metric "system.network_connections" "$network_connections" "gauge" "runner=${{ runner.os }}"
        fi
        
        echo ""
        
        # Generate monitoring report
        echo "📋 Generating monitoring report..."
        
        MONITORING_REPORT=$(cat << EOF
        Monitoring Report
        =================
        Timestamp: $timestamp
        Job: $JOB_NAME
        Step: $STEP_NAME
        Metrics Collected: $metrics_collected
        
        Workflow Context:
        - Workflow: ${{ github.workflow }}
        - Run ID: ${{ github.run_id }}
        - Run Number: ${{ github.run_number }}
        - Event: ${{ github.event_name }}
        - Branch: ${{ github.ref_name }}
        - Commit: ${{ github.sha }}
        - Actor: ${{ github.actor }}
        - Runner: ${{ runner.os }} (${{ runner.arch }})
        EOF
        )
        
        # Save metrics to files
        echo "💾 Saving metrics data..."
        
        # CSV format for easy processing
        {
          echo "metric_name,type,value,timestamp,tags"
          for metric in "${monitoring_data[@]}"; do
            echo "$metric"
          done
        } > "monitoring-data/metrics-$(date +%Y%m%d_%H%M%S).csv"
        
        # JSON format for programmatic access
        {
          echo "{"
          echo "  \"timestamp\": \"$timestamp\","
          echo "  \"job_name\": \"$JOB_NAME\","
          echo "  \"step_name\": \"$STEP_NAME\","
          echo "  \"workflow\": \"${{ github.workflow }}\","
          echo "  \"run_id\": \"${{ github.run_id }}\","
          echo "  \"metrics_count\": $metrics_collected,"
          echo "  \"metrics\": ["

          first=true
          for metric in "${monitoring_data[@]}"; do
            IFS=',' read -r name type value ts tags <<< "$metric"
            if [ "$first" = true ]; then
              first=false
            else
              echo ","
            fi
            echo -n "    {\"name\": \"$name\", \"type\": \"$type\", \"value\": \"$value\", \"timestamp\": \"$ts\", \"tags\": \"$tags\"}"
          done

          echo ""
          echo "  ]"
          echo "}"
        } > "monitoring-data/metrics-$(date +%Y%m%d_%H%M%S).json"
        
        # System metrics summary
        if [ "$COLLECT_SYSTEM_METRICS" = "true" ]; then
          SYSTEM_METRICS="CPU: ${cpu_usage:-N/A}%, Memory: ${memory_percent:-N/A}%, Disk: ${disk_usage:-N/A}%, Load: ${load_avg:-N/A}"
        else
          SYSTEM_METRICS="System metrics collection disabled"
        fi
        
        # Set outputs
        echo "metrics_collected=$metrics_collected" >> $GITHUB_OUTPUT
        echo "system_metrics=$SYSTEM_METRICS" >> $GITHUB_OUTPUT
        
        # Handle multiline output for monitoring report
        {
          echo "monitoring_report<<EOF"
          echo "$MONITORING_REPORT"
          echo "EOF"
        } >> $GITHUB_OUTPUT
        
        # Send metrics to external endpoint if configured
        if [ -n "$MONITORING_ENDPOINT" ]; then
          echo "📤 Sending metrics to external endpoint..."
          
          # Create payload
          PAYLOAD=$(cat "monitoring-data/metrics-$(date +%Y%m%d_%H%M%S).json")
          
          # Send via HTTP POST
          curl -X POST \
            -H "Content-Type: application/json" \
            -H "User-Agent: GitHub-Actions-Monitoring/1.0" \
            -d "$PAYLOAD" \
            "$MONITORING_ENDPOINT" \
            --max-time 30 \
            --retry 3 \
            --retry-delay 5 || echo "⚠️ Failed to send metrics to external endpoint"
        fi
        
        # Create step summary
        echo "## 📊 Monitoring Summary" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "| Metric | Value |" >> $GITHUB_STEP_SUMMARY
        echo "|--------|-------|" >> $GITHUB_STEP_SUMMARY
        echo "| **Metrics Collected** | $metrics_collected |" >> $GITHUB_STEP_SUMMARY
        echo "| **Timestamp** | $timestamp |" >> $GITHUB_STEP_SUMMARY
        echo "| **Job** | $JOB_NAME |" >> $GITHUB_STEP_SUMMARY
        echo "| **Step** | $STEP_NAME |" >> $GITHUB_STEP_SUMMARY
        
        if [ "$COLLECT_SYSTEM_METRICS" = "true" ]; then
          echo "| **System Metrics** | $SYSTEM_METRICS |" >> $GITHUB_STEP_SUMMARY
        fi
        
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### 📈 Key Metrics" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        
        # Show top 10 metrics in summary
        local count=0
        for metric in "${monitoring_data[@]}"; do
          if [ $count -ge 10 ]; then break; fi
          IFS=',' read -r name type value ts tags <<< "$metric"
          echo "- **$name**: $value ($type)" >> $GITHUB_STEP_SUMMARY
          count=$((count + 1))
        done
        
        if [ ${#monitoring_data[@]} -gt 10 ]; then
          echo "- ... and $((${#monitoring_data[@]} - 10)) more metrics" >> $GITHUB_STEP_SUMMARY
        fi
        
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "📁 **Detailed metrics available in artifacts**" >> $GITHUB_STEP_SUMMARY
        
        echo "✅ Monitoring data collection completed: $metrics_collected metrics"

    - name: 📤 Upload Monitoring Data
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: monitoring-data-${{ inputs.job_name }}-${{ github.run_id }}
        path: monitoring-data/
        retention-days: 30

name: 🛡️ Security Scanning

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main, develop]
  schedule:
    - cron: '0 2 * * *'
  workflow_dispatch:

permissions:
  contents: read
  security-events: write
  actions: read

env:
  PYTHON_VERSION: "3.12"

jobs:
  # ============================================================================
  # COMPREHENSIVE SECURITY SCANNING
  # ============================================================================
  security:
    name: 🛡️ Security Analysis
    runs-on: ubuntu-latest
    timeout-minutes: 30

    steps:
      - name: 📥 Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: ⚡ Setup uv
        uses: astral-sh/setup-uv@v4
        with:
          enable-cache: true

      - name: 🐍 Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: 📦 Install Dependencies
        run: |
          cd backend
          uv sync --group dev --frozen

      # ========================================================================
      # DEPENDENCY SECURITY
      # ========================================================================
      - name: 🔍 Dependency Vulnerability Scan
        run: |
          cd backend
          echo "🔍 Running dependency security scans..."
          
          # Safety check
          uv run safety check --json --output safety-report.json || true
          uv run safety check || true
          
          # Pip-audit check 
          uv run pip-audit --format=json --output=pip-audit-report.json || true
          uv run pip-audit || true

      # ========================================================================
      # CODE SECURITY
      # ========================================================================
      - name: 🛡️ Code Security Analysis
        run: |
          cd backend
          echo "🛡️ Running code security analysis..."
          
          # Bandit scan
          uv run bandit -r . \
            -f json \
            -o bandit-security-report.json \
            --severity-level medium \
            --confidence-level medium || true
          
          # Semgrep scan
          uv run semgrep --config=auto --json --output=semgrep.json . || true
          uv run semgrep --config=auto --sarif --output=semgrep.sarif . || true

      # ========================================================================
      # SECRET DETECTION
      # ========================================================================
      - name: 🔐 Secret Detection
        run: |
          echo "🔐 Running secret detection..."
          
          # Basic patterns
          if grep -r -i -E "(api[_-]?key|secret|token|password|pwd)\s*[:=]\s*['\"][^'\"]{8,}" . \
             --exclude-dir=.git --exclude-dir=.venv --exclude="*.md" || true; then
            echo "⚠️ Potential secrets found in code"
          fi
          
          # URLs with credentials
          if grep -r -E "https?://[^:]+:[^@]+@" . \
             --exclude-dir=.git --exclude-dir=.venv --exclude="*.md" || true; then
            echo "⚠️ Potential credentials in URLs found"
          fi
          
          echo "✅ Secret detection completed"

      # ========================================================================
      # CONTAINER SECURITY
      # ========================================================================
      - name: 🐳 Container Security Scan
        if: hashFiles('Dockerfile', 'backend/Dockerfile') != ''
        run: |
          echo "🐳 Building and scanning Docker image..."
          
          if [ -f Dockerfile ]; then
            docker build -t keiko-backend:security-scan .
          elif [ -f backend/Dockerfile ]; then
            cd backend
            docker build -t keiko-backend:security-scan .
          else
            echo "No Dockerfile found, skipping container scan"
            exit 0
          fi

      - name: 🔍 Run Trivy Container Scan
        if: hashFiles('Dockerfile', 'backend/Dockerfile') != ''
        uses: aquasecurity/trivy-action@v0.24.0
        with:
          image-ref: 'keiko-backend:security-scan'
          format: 'sarif'
          output: 'trivy-results.sarif'

      # ========================================================================
      # TRUFFLEHOG SECRETS SCAN
      # ========================================================================
      - name: 🔎 TruffleHog Secrets Scan
        uses: trufflesecurity/trufflehog@v3.81.9
        with:
          path: ./
          base: main
          head: HEAD
          extra_args: --only-verified

      # ========================================================================
      # SARIF UPLOADS
      # ========================================================================
      - name: 📊 Upload SARIF Results
        if: always()
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: |
            backend/semgrep.sarif
            trivy-results.sarif
        continue-on-error: true

      # ========================================================================
      # ARTIFACTS
      # ========================================================================
      - name: 📤 Upload Security Reports
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: security-reports
          path: |
            backend/*-report.json
            backend/semgrep.*
            trivy-results.sarif
          retention-days: 30

  # ============================================================================
  # SUMMARY
  # ============================================================================
  result:
    name: 📊 Security Result
    runs-on: ubuntu-latest
    needs: [security]
    if: always()
    steps:
      - name: 📊 Security Summary
        run: |
          echo "## 🛡️ Security Scan Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "| Scan Type | Status |" >> $GITHUB_STEP_SUMMARY
          echo "|-----------|--------|" >> $GITHUB_STEP_SUMMARY
          echo "| **Security Analysis** | ${{ needs.security.result }} |" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          if [ "${{ needs.security.result }}" = "success" ]; then
            echo "### ✅ Security Scans Completed" >> $GITHUB_STEP_SUMMARY
            echo "All security scans completed successfully." >> $GITHUB_STEP_SUMMARY
          else
            echo "### ⚠️ Security Issues Detected" >> $GITHUB_STEP_SUMMARY
            echo "Please review the security reports for details." >> $GITHUB_STEP_SUMMARY
          fi

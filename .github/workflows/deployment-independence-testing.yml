name: Deployment Independence Testing

on:
  push:
    branches: [ main, develop ]
    paths:
      - '../../src/**'
      - 'tests/deployment_independence_tests.py'
      - 'scripts/architecture_compliance_analyzer.py'
      - '.github/workflows/deployment-independence-testing.yml'
  pull_request:
    branches: [ main, develop ]
    paths:
      - '../../src/**'
      - 'tests/deployment_independence_tests.py'
      - 'scripts/architecture_compliance_analyzer.py'
      - '.github/workflows/deployment-independence-testing.yml'

jobs:
  platform-independence-test:
    name: Platform Independence Test
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
        
    - name: Install system dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y docker.io
        
    - name: Install Python dependencies
      run: |
        python -m pip install --upgrade pip
        pip install docker pyyaml jsonschema requests
        
        # Install Platform dependencies (without SDK)
        cd backend
        uv sync
        
    - name: Run Platform Independence Tests
      run: |
        echo "🚀 Running Platform Independence Tests..."
        python tests/deployment_independence_tests.py
        
    - name: Upload test report
      if: always()
      uses: actions/upload-artifact@v3
      with:
        name: deployment-independence-test-report
        path: deployment_independence_test_report.md
        
    - name: Comment PR with test results
      if: github.event_name == 'pull_request' && always()
      uses: actions/github-script@v6
      with:
        script: |
          const fs = require('fs');
          
          try {
            const report = fs.readFileSync('deployment_independence_test_report.md', 'utf8');
            
            const comment = `## 🚀 Deployment Independence Test Results
            
            ${report}
            
            ---
            *This comment was automatically generated by the Deployment Independence Testing workflow.*`;
            
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: comment
            });
          } catch (error) {
            console.log('Could not read test report:', error.message);
          }

  cross-dependency-detection:
    name: Cross-Dependency Detection
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Install uv
      uses: astral-sh/setup-uv@v4
      with:
        version: "latest"
        enable-cache: true

    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.11'
        cache: "uv"

    - name: Install dependencies
      run: |
        uv pip install pyyaml jsonschema
        
    - name: Run Architecture Compliance Analyzer
      run: |
        echo "🔍 Running Architecture Compliance Analysis..."
        python scripts/architecture_compliance_analyzer.py
        
    - name: Check for Cross-Dependencies
      run: |
        echo "🔗 Checking for Cross-Dependencies..."
        
        # Erweiterte Cross-Dependency Checks
        python -c "
        import os
        import re
        from pathlib import Path
        
        def check_cross_dependencies():
            violations = []
            backend_dir = Path('backend')
            
            # 1. Prüfe auf SDK-Imports in Backend
            for py_file in backend_dir.rglob('*.py'):
                try:
                    with open(py_file, 'r', encoding='utf-8') as f:
                        content = f.read()
                    
                    # Verbotene SDK-Imports
                    forbidden_patterns = [
                        r'from\s+kei_agent_py_sdk',
                        r'import\s+kei_agent_py_sdk',
                        r'from\s+kei\.agent',
                        r'import\s+kei\.agent'
                    ]
                    
                    for pattern in forbidden_patterns:
                        if re.search(pattern, content, re.IGNORECASE):
                            violations.append(f'{py_file}: {pattern}')
                            
                except Exception:
                    continue
            
            # 2. Prüfe auf relative Imports zwischen Platform und SDK
            for py_file in backend_dir.rglob('*.py'):
                try:
                    with open(py_file, 'r', encoding='utf-8') as f:
                        content = f.read()
                    
                    # Verdächtige relative Imports
                    suspicious_patterns = [
                        r'from\s+\.\..*sdk',
                        r'import\s+\.\..*sdk',
                        r'from\s+.*\.sdk\.',
                        r'import\s+.*\.sdk\.'
                    ]
                    
                    for pattern in suspicious_patterns:
                        if re.search(pattern, content, re.IGNORECASE):
                            violations.append(f'{py_file}: Suspicious relative import - {pattern}')
                            
                except Exception:
                    continue
            
            # 3. Prüfe Konfigurationsdateien
            config_files = [
                'backend/pyproject.toml',
                'backend/requirements.txt',
                'backend/setup.py'
            ]
            
            for config_file in config_files:
                config_path = Path(config_file)
                if config_path.exists():
                    try:
                        with open(config_path, 'r', encoding='utf-8') as f:
                            content = f.read()
                        
                        if 'kei-agent-py-sdk' in content.lower() or 'kei_agent_py_sdk' in content.lower():
                            violations.append(f'{config_file}: Contains SDK dependency')
                            
                    except Exception:
                        continue
            
            return violations
        
        violations = check_cross_dependencies()
        
        if violations:
            print('❌ CROSS-DEPENDENCIES DETECTED:')
            for violation in violations:
                print(f'  - {violation}')
            exit(1)
        else:
            print('✅ No cross-dependencies detected')
        "
        
    - name: Upload compliance report
      if: always()
      uses: actions/upload-artifact@v3
      with:
        name: architecture-compliance-report
        path: architecture_compliance_report.json

  docker-isolation-test:
    name: Docker Isolation Test
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
      
    - name: Test Platform Docker Isolation
      run: |
        echo "🐳 Testing Platform Docker Isolation..."
        
        # Erstelle Dockerfile für Platform-only Test
        cat > Dockerfile.platform-test << 'EOF'
        FROM python:3.11-slim
        
        WORKDIR /app
        
        # Kopiere nur Platform-Code (explizit ohne SDK)
        COPY backend/ ./backend/
        COPY api-contracts/ ./api-contracts/
        
        # Installiere nur Platform-Dependencies
        RUN cd backend && \
            pip install --no-cache-dir -e . && \
            python -c "import backend; print('✅ Platform imports successful')"
        
        # Teste dass keine SDK-Dependencies vorhanden sind
        RUN python -c "
        try:
            import kei_agent_py_sdk
            print('❌ SDK should not be available')
            exit(1)
        except ImportError:
            print('✅ SDK correctly not available')
        "
        
        # Teste Platform-Module
        RUN python -c "
        import sys
        sys.path.insert(0, '/app/backend')
        
        try:
            import api
            import agents
            import common
            print('✅ Platform modules importable')
        except ImportError as e:
            print(f'❌ Platform module import failed: {e}')
            exit(1)
        "
        
        CMD ["echo", "Platform Docker isolation test passed"]
        EOF
        
        # Baue und teste Docker Image
        docker build -f Dockerfile.platform-test -t keiko-platform-isolation-test .
        docker run --rm keiko-platform-isolation-test
        
    - name: Test Platform API Isolation
      run: |
        echo "🌐 Testing Platform API Isolation..."
        
        # Erstelle Dockerfile für API-Test
        cat > Dockerfile.api-test << 'EOF'
        FROM python:3.11-slim
        
        WORKDIR /app
        
        COPY backend/ ./backend/
        COPY api-contracts/ ./api-contracts/
        
        RUN cd backend && pip install --no-cache-dir -e .
        
        # Teste API-Verfügbarkeit ohne SDK
        RUN python -c "
        import sys
        sys.path.insert(0, '/app/backend')
        
        try:
            from api.routes import health
            from api.routes import kei_agents_routes
            print('✅ API routes importable without SDK')
        except ImportError as e:
            print(f'❌ API import failed: {e}')
            exit(1)
        "
        
        CMD ["echo", "Platform API isolation test passed"]
        EOF
        
        docker build -f Dockerfile.api-test -t keiko-platform-api-test .
        docker run --rm keiko-platform-api-test

  dependency-graph-analysis:
    name: Dependency Graph Analysis
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Install uv
      uses: astral-sh/setup-uv@v4
      with:
        version: "latest"
        enable-cache: true

    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.11'
        cache: "uv"

    - name: Install analysis tools
      run: |
        uv pip install pipdeptree pydeps
        
    - name: Analyze Platform Dependencies
      run: |
        echo "📊 Analyzing Platform Dependencies..."
        
        cd backend
        uv sync
        
        # Generiere Dependency-Tree
        pipdeptree --packages backend > ../platform_dependencies.txt
        
        # Prüfe auf SDK-Dependencies
        if grep -i "kei.*agent.*sdk" ../platform_dependencies.txt; then
          echo "❌ Platform has SDK dependencies!"
          exit 1
        else
          echo "✅ Platform has no SDK dependencies"
        fi
        
    - name: Generate Dependency Report
      run: |
        echo "📋 Generating Dependency Report..."
        
        python -c "
        import subprocess
        import json
        from datetime import datetime
        
        # Sammle Dependency-Informationen
        try:
            result = subprocess.run(['pipdeptree', '--json'], 
                                  capture_output=True, text=True, cwd='backend')
            dependencies = json.loads(result.stdout) if result.returncode == 0 else []
        except:
            dependencies = []
        
        # Erstelle Report
        report = {
            'generated_at': datetime.now().isoformat(),
            'platform_dependencies': len(dependencies),
            'sdk_dependencies_found': False,
            'dependencies': dependencies
        }
        
        # Prüfe auf SDK-Dependencies
        for dep in dependencies:
            if 'kei' in dep.get('package', {}).get('package_name', '').lower():
                if 'sdk' in dep.get('package', {}).get('package_name', '').lower():
                    report['sdk_dependencies_found'] = True
                    break
        
        with open('dependency_analysis_report.json', 'w') as f:
            json.dump(report, f, indent=2)
            
        print(f'Dependencies analyzed: {len(dependencies)}')
        print(f'SDK dependencies found: {report[\"sdk_dependencies_found\"]}')
        "
        
    - name: Upload dependency report
      uses: actions/upload-artifact@v3
      with:
        name: dependency-analysis-report
        path: |
          dependency_analysis_report.json
          platform_dependencies.txt

  compliance-gate:
    name: Compliance Gate
    runs-on: ubuntu-latest
    needs: [platform-independence-test, cross-dependency-detection, docker-isolation-test, dependency-graph-analysis]
    if: always()
    
    steps:
    - name: Check all jobs status
      run: |
        echo "🚪 Compliance Gate Check..."
        
        # Prüfe Job-Status
        platform_test="${{ needs.platform-independence-test.result }}"
        cross_dep="${{ needs.cross-dependency-detection.result }}"
        docker_test="${{ needs.docker-isolation-test.result }}"
        dep_analysis="${{ needs.dependency-graph-analysis.result }}"
        
        echo "Platform Independence Test: $platform_test"
        echo "Cross-Dependency Detection: $cross_dep"
        echo "Docker Isolation Test: $docker_test"
        echo "Dependency Graph Analysis: $dep_analysis"
        
        # Alle Jobs müssen erfolgreich sein
        if [[ "$platform_test" == "success" && "$cross_dep" == "success" && "$docker_test" == "success" && "$dep_analysis" == "success" ]]; then
          echo "✅ COMPLIANCE GATE PASSED: All deployment independence tests successful"
          exit 0
        else
          echo "❌ COMPLIANCE GATE FAILED: One or more tests failed"
          exit 1
        fi

name: 🚀 Main CI/CD Pipeline

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main, develop]
  schedule:
    - cron: "0 3 * * *"
  workflow_dispatch:

permissions:
  contents: read
  security-events: write
  actions: read
  pull-requests: write

env:
  PYTHON_VERSION: "3.12"
  COVERAGE_THRESHOLD: 85
  UV_CACHE_DIR: ~/.cache/uv

jobs:
  # ============================================================================
  # SETUP & VALIDATION
  # ============================================================================
  setup:
    name: 🔍 Setup & Validation
    runs-on: ubuntu-latest
    timeout-minutes: 10
    outputs:
      backend-changed: ${{ steps.changes.outputs.backend }}
      tests-changed: ${{ steps.changes.outputs.tests }}
      docs-changed: ${{ steps.changes.outputs.docs }}
      skip-tests: ${{ steps.skip-check.outputs.skip }}
    steps:
      - name: 📥 Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: 🔍 Detect Changes
        uses: dorny/paths-filter@v3
        id: changes
        with:
          filters: |
            backend:
              - 'backend/**'
              - 'pyproject.toml'
              - 'uv.lock'
              - 'requirements*.txt'
            tests:
              - 'tests/**'
              - 'backend/tests/**'
            docs:
              - 'docs/**'
              - '*.md'
              - 'mkdocs.yml'

      - name: ⏭️ Skip Check
        id: skip-check
        run: |
          if [[ "${{ github.event.head_commit.message }}" =~ \[skip.ci\] ]]; then
            echo "skip=true" >> $GITHUB_OUTPUT
          else
            echo "skip=false" >> $GITHUB_OUTPUT
          fi

  # ============================================================================
  # QUALITY GATES
  # ============================================================================
  quality:
    name: 🧹 Code Quality
    runs-on: ubuntu-latest
    timeout-minutes: 15
    needs: setup
    if: needs.setup.outputs.backend-changed == 'true' && needs.setup.outputs.skip-tests == 'false'
    steps:
      - name: 📥 Checkout
        uses: actions/checkout@v4

      - name: ⚡ Setup uv
        uses: astral-sh/setup-uv@v4
        with:
          enable-cache: true

      - name: 🐍 Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: 📦 Install Dependencies
        run: |
          cd backend
          uv sync --group dev --frozen

      - name: 🔍 Ruff Lint & Format
        run: |
          cd backend
          uv run ruff check . --output-format=github
          uv run ruff format --check .

      - name: 🔍 MyPy Type Check
        run: |
          cd backend
          uv run mypy . --show-error-codes

  # ============================================================================
  # TESTS
  # ============================================================================
  test:
    name: 🧪 Tests
    runs-on: ubuntu-latest
    timeout-minutes: 30
    needs: [setup, quality]
    if: needs.setup.outputs.backend-changed == 'true' && needs.setup.outputs.skip-tests == 'false'
    strategy:
      fail-fast: false
      matrix:
        test-type: [unit, integration, e2e]
        include:
          - test-type: unit
            path: tests/unit/
            services: false
            timeout: 15
          - test-type: integration  
            path: tests/integration/
            services: true
            timeout: 20
          - test-type: e2e
            path: tests/e2e/
            services: true
            timeout: 25

    services:
      postgres:
        image: postgres:15-alpine
        env:
          POSTGRES_PASSWORD: test_password
          POSTGRES_USER: test_user
          POSTGRES_DB: test_db
        ports:
          - 5432:5432
        options: --health-cmd pg_isready --health-interval 10s --health-timeout 5s --health-retries 5
        if: matrix.services

      redis:
        image: redis:7-alpine
        ports:
          - 6379:6379
        options: --health-cmd "redis-cli ping" --health-interval 10s --health-timeout 5s --health-retries 5
        if: matrix.services

    steps:
      - name: 📥 Checkout
        uses: actions/checkout@v4

      - name: ⚡ Setup uv
        uses: astral-sh/setup-uv@v4
        with:
          enable-cache: true

      - name: 🐍 Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: 📦 Install Dependencies
        run: |
          cd backend
          uv sync --group dev --group test --frozen

      - name: 🔧 Setup Test Environment
        if: matrix.services
        run: |
          cd backend
          echo "DATABASE_URL=postgresql://test_user:test_password@localhost:5432/test_db" >> .env.test
          echo "REDIS_URL=redis://localhost:6379/0" >> .env.test
          echo "TESTING=true" >> .env.test

      - name: 🧪 Run ${{ matrix.test-type }} Tests
        run: |
          cd backend
          uv run pytest ${{ matrix.path }} \
            --cov=. \
            --cov-report=xml \
            --cov-report=term-missing \
            --junit-xml=pytest-${{ matrix.test-type }}-results.xml \
            --timeout=${{ matrix.timeout }}0 \
            --maxfail=5 \
            -v
        timeout-minutes: ${{ matrix.timeout }}

      - name: 📤 Upload Test Results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: test-results-${{ matrix.test-type }}
          path: |
            backend/pytest-${{ matrix.test-type }}-results.xml
            backend/coverage.xml
          retention-days: 30

      - name: 📊 Upload Coverage
        if: matrix.test-type == 'unit' && github.event_name != 'schedule'
        uses: codecov/codecov-action@v4
        with:
          file: backend/coverage.xml
          fail_ci_if_error: false
          token: ${{ secrets.CODECOV_TOKEN }}

  # ============================================================================
  # BUILD
  # ============================================================================
  build:
    name: 🏗️ Build
    runs-on: ubuntu-latest
    timeout-minutes: 15
    needs: [setup, quality]
    if: needs.setup.outputs.backend-changed == 'true'
    steps:
      - name: 📥 Checkout
        uses: actions/checkout@v4

      - name: ⚡ Setup uv
        uses: astral-sh/setup-uv@v4
        with:
          enable-cache: true

      - name: 🐍 Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: 📦 Install Build Dependencies
        run: |
          cd backend
          uv add --dev build hatchling

      - name: 🏗️ Build Package
        run: |
          cd backend
          uv run python -m build

      - name: 📤 Upload Build Artifacts
        uses: actions/upload-artifact@v4
        with:
          name: dist-packages
          path: backend/dist/
          retention-days: 30

  # ============================================================================
  # SONARQUBE ANALYSIS
  # ============================================================================
  sonarqube:
    name: 📊 SonarQube Analysis
    runs-on: ubuntu-latest
    timeout-minutes: 20
    needs: [setup, test]
    if: needs.setup.outputs.backend-changed == 'true'
    steps:
      - name: 📥 Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Shallow clones disable blame information

      - name: ⚡ Setup uv
        uses: astral-sh/setup-uv@v4
        with:
          enable-cache: true

      - name: 🐍 Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: 📦 Install Dependencies
        run: |
          cd backend
          uv sync --group dev --group test --frozen

      - name: 📊 Generate Reports for SonarQube
        run: |
          cd backend
          # Test coverage
          uv run pytest tests/ --cov=. --cov-report=xml --junit-xml=pytest-junit.xml || true
          
          # Security reports
          uv run bandit -r . -f json -o bandit-report.json --skip B101,B601 || true
          
          # Type checking
          uv run mypy . --junit-xml mypy-report.xml || true

      - name: 📊 SonarQube Scan
        uses: SonarSource/sonarqube-scan-action@v2
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        with:
          args: >
            -Dsonar.projectKey=Keiko-Development_keiko-backbone
            -Dsonar.organization=keiko-development
            -Dsonar.python.coverage.reportPaths=backend/coverage.xml
            -Dsonar.python.xunit.reportPath=backend/pytest-junit.xml
            -Dsonar.python.bandit.reportPaths=backend/bandit-report.json
            -Dsonar.sources=backend/

      - name: 📊 Quality Gate Check
        uses: SonarSource/sonarqube-quality-gate-action@v1
        timeout-minutes: 5
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN}}
        continue-on-error: true  # Don't fail CI on quality gate issues

  # ============================================================================
  # SECURITY
  # ============================================================================
  security:
    name: 🛡️ Security Scan
    runs-on: ubuntu-latest
    timeout-minutes: 20
    needs: setup
    if: needs.setup.outputs.backend-changed == 'true'
    permissions:
      security-events: write
    steps:
      - name: 📥 Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: ⚡ Setup uv
        uses: astral-sh/setup-uv@v4
        with:
          enable-cache: true

      - name: 🐍 Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: 📦 Install Dependencies
        run: |
          cd backend
          uv sync --group dev --frozen

      - name: 🔍 Run Security Scans
        run: |
          cd backend
          # Safety
          uv run safety check --json --output safety-report.json || true
          # Semgrep
          uv run semgrep --config=auto --json --output=semgrep.json . || true
          uv run semgrep --config=auto --sarif --output=semgrep.sarif . || true

      - name: 📤 Upload Security Reports
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: security-reports
          path: |
            backend/*-report.json
            backend/semgrep.sarif
          retention-days: 30

      - name: 📊 Upload SARIF
        if: always()
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: backend/semgrep.sarif

  # ============================================================================
  # SUMMARY
  # ============================================================================
  result:
    name: ✅ CI Result
    runs-on: ubuntu-latest
    needs: [setup, quality, test, build, sonarqube, security]
    if: always()
    steps:
      - name: 📊 Check Results
        run: |
          echo "Setup: ${{ needs.setup.result }}"
          echo "Quality: ${{ needs.quality.result }}"
          echo "Tests: ${{ needs.test.result }}"
          echo "Build: ${{ needs.build.result }}"
          echo "SonarQube: ${{ needs.sonarqube.result }}"
          echo "Security: ${{ needs.security.result }}"

      - name: ✅ Success
        if: |
          needs.setup.result == 'success' &&
          (needs.quality.result == 'success' || needs.quality.result == 'skipped') &&
          (needs.test.result == 'success' || needs.test.result == 'skipped') &&
          (needs.build.result == 'success' || needs.build.result == 'skipped') &&
          (needs.sonarqube.result == 'success' || needs.sonarqube.result == 'skipped') &&
          (needs.security.result == 'success' || needs.security.result == 'skipped')
        run: echo "🎉 All CI checks passed!"

      - name: ❌ Failure
        if: contains(needs.*.result, 'failure')
        run: |
          echo "❌ CI checks failed. Check the logs above."
          exit 1

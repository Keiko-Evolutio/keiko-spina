# NGINX Reverse Proxy für Keiko Personal Assistant
# - SSL/TLS Terminierung
# - HSTS + Security Headers
# - WebSocket-Proxy (WS/WSS) für KEI-Stream
# - Rate Limiting (lokal + Redis-basiert via Lua)
# - Gzip für statische Assets
# - React SPA Fallback

user  nginx;
worker_processes  auto;

events {
    worker_connections  1024;
}

http {
    # --------------------------------------------------------------
    # Grundkonfiguration
    # --------------------------------------------------------------
    include       mime.types;
    default_type  application/octet-stream;
    sendfile        on;
    tcp_nopush      on;
    tcp_nodelay     on;
    keepalive_timeout  65;
    server_tokens off;  # Versions-Disclosure vermeiden

    # --------------------------------------------------------------
    # Gzip Kompression
    # --------------------------------------------------------------
    gzip on;
    gzip_comp_level 5;
    gzip_min_length 256;
    gzip_vary on;
    gzip_proxied any;
    gzip_types text/plain text/css application/json application/javascript text/xml application/xml application/xml+rss text/javascript image/svg+xml;

    # --------------------------------------------------------------
    # Upstreams (Load Balancing)
    # Hinweis: Backend läuft z. B. nativ auf macOS: host.docker.internal:8000
    # In Produktionsumgebungen Services direkt in Docker/K8s per DNS eintragen.
    # --------------------------------------------------------------
    upstream keiko_backend {
        least_conn;
        server host.docker.internal:8000 max_fails=3 fail_timeout=30s;
        # Weitere Backends können hier hinzugefügt werden
    }

    # --------------------------------------------------------------
    # Shared-Memory Rate Limits (lokal)
    #  - Normal: 100 req/min
    #  - Heavy:  10 req/min
    # --------------------------------------------------------------
    limit_req_zone $binary_remote_addr zone=api_normal:10m rate=100r/m;
    limit_req_zone $binary_remote_addr zone=api_heavy:10m rate=10r/m;

    # --------------------------------------------------------------
    # Lua/Redis Setup (nur wenn OpenResty/nginx-lua verfügbar)
    #   - Redis zum verteilten Rate Limiting
    #   - Fallback: lokales limit_req
    # --------------------------------------------------------------
    lua_package_path "/usr/local/openresty/lualib/?.lua;;";

    init_by_lua_block {
      -- Initialisierungslogik, falls benötigt
    }

    # Hilfsfunktion: Redis-basierter Rate-Limit Check (Sliding Window)
    lua_shared_dict ddos_cache 10m;

    # --------------------------------------------------------------
    # HTTPS Server (SSL Terminierung)
    # --------------------------------------------------------------
    server {
        listen              443 ssl http2;
        server_name         _;

        # Zertifikate (Platzhalter – in Produktion durch echte Zertifikate ersetzen)
        ssl_certificate     /etc/nginx/certs/server.crt;
        ssl_certificate_key /etc/nginx/certs/server.key;
        ssl_protocols       TLSv1.2 TLSv1.3;
        ssl_ciphers         HIGH:!aNULL:!MD5;

        # HSTS (1 Jahr, Subdomains, Preload)
        add_header Strict-Transport-Security "max-age=31536000; includeSubDomains; preload" always;

        # Security Headers
        add_header X-Frame-Options "DENY" always;
        add_header X-Content-Type-Options "nosniff" always;
        add_header X-XSS-Protection "1; mode=block" always;
        add_header Referrer-Policy "strict-origin-when-cross-origin" always;
        add_header Content-Security-Policy "default-src 'self'; script-src 'self' 'unsafe-inline'; style-src 'self' 'unsafe-inline'; connect-src 'self' ws: wss:; frame-ancestors 'none'" always;

        # ------------------------------------------------------------------
        # Frontend (React SPA) – optionales Serving direkt über NGINX
        # Hinweis: Pfad /usr/share/nginx/html als Mount befüllen
        # ------------------------------------------------------------------
        root /usr/share/nginx/html;
        index index.html;

        # React SPA Fallback
        location / {
            try_files $uri $uri/ /index.html;
        }

        # ------------------------------------------------------------------
        # API Proxy
        #   - Lokales Rate Limiting (limit_req)
        #   - Zusätzlich Redis-basiertes Limiting via Lua (wenn verfügbar)
        # ------------------------------------------------------------------
        location /api/ {
            # Normal-API Limits
            limit_req zone=api_normal burst=50 nodelay;

            # Redis-basiertes Limit (optional)
            access_by_lua_block {
              local redis = require "resty.redis"
              local r = redis:new()
              r:set_timeout(5)
              local ok, err = r:connect("redis", 6379)
              if ok then
                local ip = ngx.var.remote_addr or "0.0.0.0"
                local key = "rate:normal:" .. ip .. ":" .. os.date("%Y%m%d%H%M")
                local cnt, err = r:incr(key)
                if cnt == 1 then r:expire(key, 70) end
                if cnt and tonumber(cnt) > 100 then
                  return ngx.exit(429)
                end
              end
            }

            proxy_pass http://keiko_backend;
            proxy_http_version 1.1;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto https;
        }

        # Ressourcenintensive Endpunkte separat behandeln (z. B. /api/v1/agents/run)
        location /api/v1/agents/run {
            limit_req zone=api_heavy burst=5 nodelay;
            access_by_lua_block {
              local redis = require "resty.redis"
              local r = redis:new()
              r:set_timeout(5)
              local ok, err = r:connect("redis", 6379)
              if ok then
                local ip = ngx.var.remote_addr or "0.0.0.0"
                local key = "rate:heavy:" .. ip .. ":" .. os.date("%Y%m%d%H%M")
                local cnt, err = r:incr(key)
                if cnt == 1 then r:expire(key, 70) end
                if cnt and tonumber(cnt) > 10 then
                  return ngx.exit(429)
                end
              end
            }
            proxy_pass http://keiko_backend;
            proxy_http_version 1.1;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto https;
        }

        # WebSocket Proxy (KEI-Stream, generisch für /ws und /stream)
        location /ws/ {
            proxy_pass http://keiko_backend;
            proxy_http_version 1.1;
            proxy_set_header Upgrade $http_upgrade;
            proxy_set_header Connection "upgrade";
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto https;
        }

        location /stream/ {
            proxy_pass http://keiko_backend;
            proxy_http_version 1.1;
            proxy_set_header Upgrade $http_upgrade;
            proxy_set_header Connection "upgrade";
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto https;
        }
    }

    # HTTP -> HTTPS Redirect
    server {
        listen 80;
        server_name _;
        return 301 https://$host$request_uri;
    }
}

# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc
import kei_rpc_pb2 as kei__rpc__pb2

# Handle grpc.experimental compatibility
if not hasattr(grpc, "experimental"):
    import grpc.experimental  # type: ignore

GRPC_GENERATED_VERSION = "1.74.0"
GRPC_VERSION = grpc.__version__
_version_not_supported = False

try:
    from grpc._utilities import first_version_is_lower
    _version_not_supported = first_version_is_lower(GRPC_VERSION, GRPC_GENERATED_VERSION)
except ImportError:
    first_version_is_lower = None  # type: ignore
    _version_not_supported = True

if _version_not_supported:
    raise RuntimeError(
        f"The grpc package installed is at version {GRPC_VERSION},"
         f" but the generated code in kei_rpc_pb2_grpc.py depends on"
         f" grpcio>={GRPC_GENERATED_VERSION}."
         f" Please upgrade your grpc module to grpcio>={GRPC_GENERATED_VERSION}"
         f" or downgrade your generated code using grpcio-tools<={GRPC_VERSION}."
    )


class KEIRPCServiceStub:
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.ListResources = channel.unary_unary(
                "/api.grpc.v1.KEIRPCService/ListResources",
                request_serializer=kei__rpc__pb2.ListResourcesRequest.SerializeToString,
                response_deserializer=kei__rpc__pb2.ListResourcesResponse.FromString,
                _registered_method=True)
        self.CreateResource = channel.unary_unary(
                "/api.grpc.v1.KEIRPCService/CreateResource",
                request_serializer=kei__rpc__pb2.CreateResourceRequest.SerializeToString,
                response_deserializer=kei__rpc__pb2.Resource.FromString,
                _registered_method=True)
        self.GetResource = channel.unary_unary(
                "/api.grpc.v1.KEIRPCService/GetResource",
                request_serializer=kei__rpc__pb2.GetResourceRequest.SerializeToString,
                response_deserializer=kei__rpc__pb2.Resource.FromString,
                _registered_method=True)
        self.PatchResource = channel.unary_unary(
                "/api.grpc.v1.KEIRPCService/PatchResource",
                request_serializer=kei__rpc__pb2.PatchResourceRequest.SerializeToString,
                response_deserializer=kei__rpc__pb2.Resource.FromString,
                _registered_method=True)
        self.BatchCreate = channel.unary_unary(
                "/api.grpc.v1.KEIRPCService/BatchCreate",
                request_serializer=kei__rpc__pb2.BatchCreateRequest.SerializeToString,
                response_deserializer=kei__rpc__pb2.ListResourcesResponse.FromString,
                _registered_method=True)
        self.StreamOperations = channel.stream_stream(
                "/api.grpc.v1.KEIRPCService/StreamOperations",
                request_serializer=kei__rpc__pb2.StreamMessage.SerializeToString,
                response_deserializer=kei__rpc__pb2.StreamMessage.FromString,
                _registered_method=True)
        self.Plan = channel.unary_unary(
                "/api.grpc.v1.KEIRPCService/Plan",
                request_serializer=kei__rpc__pb2.PlanRequest.SerializeToString,
                response_deserializer=kei__rpc__pb2.OperationResponse.FromString,
                _registered_method=True)
        self.Act = channel.unary_unary(
                "/api.grpc.v1.KEIRPCService/Act",
                request_serializer=kei__rpc__pb2.ActRequest.SerializeToString,
                response_deserializer=kei__rpc__pb2.OperationResponse.FromString,
                _registered_method=True)
        self.Observe = channel.unary_unary(
                "/api.grpc.v1.KEIRPCService/Observe",
                request_serializer=kei__rpc__pb2.ObserveRequest.SerializeToString,
                response_deserializer=kei__rpc__pb2.OperationResponse.FromString,
                _registered_method=True)
        self.Explain = channel.unary_unary(
                "/api.grpc.v1.KEIRPCService/Explain",
                request_serializer=kei__rpc__pb2.ExplainRequest.SerializeToString,
                response_deserializer=kei__rpc__pb2.OperationResponse.FromString,
                _registered_method=True)


class KEIRPCServiceServicer:
    """Missing associated documentation comment in .proto file."""

    def ListResources(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details("Method not implemented!")
        raise NotImplementedError("Method not implemented!")

    def CreateResource(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details("Method not implemented!")
        raise NotImplementedError("Method not implemented!")

    def GetResource(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details("Method not implemented!")
        raise NotImplementedError("Method not implemented!")

    def PatchResource(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details("Method not implemented!")
        raise NotImplementedError("Method not implemented!")

    def BatchCreate(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details("Method not implemented!")
        raise NotImplementedError("Method not implemented!")

    def StreamOperations(self, request_iterator, context):
        """Bidi stream fÃ¼r Long-running/Realtime Aufgaben
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details("Method not implemented!")
        raise NotImplementedError("Method not implemented!")

    def Plan(self, request, context):
        """==============================
        Agent Operations (KEI-RPC v1)
        ==============================
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details("Method not implemented!")
        raise NotImplementedError("Method not implemented!")

    def Act(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details("Method not implemented!")
        raise NotImplementedError("Method not implemented!")

    def Observe(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details("Method not implemented!")
        raise NotImplementedError("Method not implemented!")

    def Explain(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details("Method not implemented!")
        raise NotImplementedError("Method not implemented!")


def add_KEIRPCServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            "ListResources": grpc.unary_unary_rpc_method_handler(
                    servicer.ListResources,
                    request_deserializer=kei__rpc__pb2.ListResourcesRequest.FromString,
                    response_serializer=kei__rpc__pb2.ListResourcesResponse.SerializeToString,
            ),
            "CreateResource": grpc.unary_unary_rpc_method_handler(
                    servicer.CreateResource,
                    request_deserializer=kei__rpc__pb2.CreateResourceRequest.FromString,
                    response_serializer=kei__rpc__pb2.Resource.SerializeToString,
            ),
            "GetResource": grpc.unary_unary_rpc_method_handler(
                    servicer.GetResource,
                    request_deserializer=kei__rpc__pb2.GetResourceRequest.FromString,
                    response_serializer=kei__rpc__pb2.Resource.SerializeToString,
            ),
            "PatchResource": grpc.unary_unary_rpc_method_handler(
                    servicer.PatchResource,
                    request_deserializer=kei__rpc__pb2.PatchResourceRequest.FromString,
                    response_serializer=kei__rpc__pb2.Resource.SerializeToString,
            ),
            "BatchCreate": grpc.unary_unary_rpc_method_handler(
                    servicer.BatchCreate,
                    request_deserializer=kei__rpc__pb2.BatchCreateRequest.FromString,
                    response_serializer=kei__rpc__pb2.ListResourcesResponse.SerializeToString,
            ),
            "StreamOperations": grpc.stream_stream_rpc_method_handler(
                    servicer.StreamOperations,
                    request_deserializer=kei__rpc__pb2.StreamMessage.FromString,
                    response_serializer=kei__rpc__pb2.StreamMessage.SerializeToString,
            ),
            "Plan": grpc.unary_unary_rpc_method_handler(
                    servicer.Plan,
                    request_deserializer=kei__rpc__pb2.PlanRequest.FromString,
                    response_serializer=kei__rpc__pb2.OperationResponse.SerializeToString,
            ),
            "Act": grpc.unary_unary_rpc_method_handler(
                    servicer.Act,
                    request_deserializer=kei__rpc__pb2.ActRequest.FromString,
                    response_serializer=kei__rpc__pb2.OperationResponse.SerializeToString,
            ),
            "Observe": grpc.unary_unary_rpc_method_handler(
                    servicer.Observe,
                    request_deserializer=kei__rpc__pb2.ObserveRequest.FromString,
                    response_serializer=kei__rpc__pb2.OperationResponse.SerializeToString,
            ),
            "Explain": grpc.unary_unary_rpc_method_handler(
                    servicer.Explain,
                    request_deserializer=kei__rpc__pb2.ExplainRequest.FromString,
                    response_serializer=kei__rpc__pb2.OperationResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            "api.grpc.v1.KEIRPCService", rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))
    server.add_registered_method_handlers("api.grpc.v1.KEIRPCService", rpc_method_handlers)


 # This class is part of an EXPERIMENTAL API.
class KEIRPCService:
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def ListResources(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            "/api.grpc.v1.KEIRPCService/ListResources",
            kei__rpc__pb2.ListResourcesRequest.SerializeToString,
            kei__rpc__pb2.ListResourcesResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def CreateResource(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            "/api.grpc.v1.KEIRPCService/CreateResource",
            kei__rpc__pb2.CreateResourceRequest.SerializeToString,
            kei__rpc__pb2.Resource.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def GetResource(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            "/api.grpc.v1.KEIRPCService/GetResource",
            kei__rpc__pb2.GetResourceRequest.SerializeToString,
            kei__rpc__pb2.Resource.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def PatchResource(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            "/api.grpc.v1.KEIRPCService/PatchResource",
            kei__rpc__pb2.PatchResourceRequest.SerializeToString,
            kei__rpc__pb2.Resource.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def BatchCreate(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            "/api.grpc.v1.KEIRPCService/BatchCreate",
            kei__rpc__pb2.BatchCreateRequest.SerializeToString,
            kei__rpc__pb2.ListResourcesResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def StreamOperations(request_iterator,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.stream_stream(
            request_iterator,
            target,
            "/api.grpc.v1.KEIRPCService/StreamOperations",
            kei__rpc__pb2.StreamMessage.SerializeToString,
            kei__rpc__pb2.StreamMessage.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def Plan(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            "/api.grpc.v1.KEIRPCService/Plan",
            kei__rpc__pb2.PlanRequest.SerializeToString,
            kei__rpc__pb2.OperationResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def Act(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            "/api.grpc.v1.KEIRPCService/Act",
            kei__rpc__pb2.ActRequest.SerializeToString,
            kei__rpc__pb2.OperationResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def Observe(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            "/api.grpc.v1.KEIRPCService/Observe",
            kei__rpc__pb2.ObserveRequest.SerializeToString,
            kei__rpc__pb2.OperationResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def Explain(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            "/api.grpc.v1.KEIRPCService/Explain",
            kei__rpc__pb2.ExplainRequest.SerializeToString,
            kei__rpc__pb2.OperationResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)
